// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DualArm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DualArm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DualArm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dtProto/std_msgs/Header.pb.h"
#include "dtProto/std_msgs/PackedArray.pb.h"
#include "dtProto/std_msgs/Request.pb.h"
#include "dtProto/geometry_msgs/Point.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DualArm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DualArm_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DualArm_2eproto;
namespace dtproto {
namespace dualarm {
class ControlState;
struct ControlStateDefaultTypeInternal;
extern ControlStateDefaultTypeInternal _ControlState_default_instance_;
class DualArmState;
struct DualArmStateDefaultTypeInternal;
extern DualArmStateDefaultTypeInternal _DualArmState_default_instance_;
class DualArmStateTimeStamped;
struct DualArmStateTimeStampedDefaultTypeInternal;
extern DualArmStateTimeStampedDefaultTypeInternal _DualArmStateTimeStamped_default_instance_;
class JointData;
struct JointDataDefaultTypeInternal;
extern JointDataDefaultTypeInternal _JointData_default_instance_;
class JointState;
struct JointStateDefaultTypeInternal;
extern JointStateDefaultTypeInternal _JointState_default_instance_;
class OperationState;
struct OperationStateDefaultTypeInternal;
extern OperationStateDefaultTypeInternal _OperationState_default_instance_;
class OperationStateTimeStamped;
struct OperationStateTimeStampedDefaultTypeInternal;
extern OperationStateTimeStampedDefaultTypeInternal _OperationStateTimeStamped_default_instance_;
class TaskState;
struct TaskStateDefaultTypeInternal;
extern TaskStateDefaultTypeInternal _TaskState_default_instance_;
class ThreadState;
struct ThreadStateDefaultTypeInternal;
extern ThreadStateDefaultTypeInternal _ThreadState_default_instance_;
}  // namespace dualarm
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> ::dtproto::dualarm::ControlState* Arena::CreateMaybeMessage<::dtproto::dualarm::ControlState>(Arena*);
template<> ::dtproto::dualarm::DualArmState* Arena::CreateMaybeMessage<::dtproto::dualarm::DualArmState>(Arena*);
template<> ::dtproto::dualarm::DualArmStateTimeStamped* Arena::CreateMaybeMessage<::dtproto::dualarm::DualArmStateTimeStamped>(Arena*);
template<> ::dtproto::dualarm::JointData* Arena::CreateMaybeMessage<::dtproto::dualarm::JointData>(Arena*);
template<> ::dtproto::dualarm::JointState* Arena::CreateMaybeMessage<::dtproto::dualarm::JointState>(Arena*);
template<> ::dtproto::dualarm::OperationState* Arena::CreateMaybeMessage<::dtproto::dualarm::OperationState>(Arena*);
template<> ::dtproto::dualarm::OperationStateTimeStamped* Arena::CreateMaybeMessage<::dtproto::dualarm::OperationStateTimeStamped>(Arena*);
template<> ::dtproto::dualarm::TaskState* Arena::CreateMaybeMessage<::dtproto::dualarm::TaskState>(Arena*);
template<> ::dtproto::dualarm::ThreadState* Arena::CreateMaybeMessage<::dtproto::dualarm::ThreadState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dtproto {
namespace dualarm {

// ===================================================================

class ThreadState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.dualarm.ThreadState) */ {
 public:
  inline ThreadState() : ThreadState(nullptr) {}
  ~ThreadState() override;
  explicit PROTOBUF_CONSTEXPR ThreadState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThreadState(const ThreadState& from);
  ThreadState(ThreadState&& from) noexcept
    : ThreadState() {
    *this = ::std::move(from);
  }

  inline ThreadState& operator=(const ThreadState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreadState& operator=(ThreadState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThreadState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreadState* internal_default_instance() {
    return reinterpret_cast<const ThreadState*>(
               &_ThreadState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ThreadState& a, ThreadState& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreadState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreadState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThreadState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThreadState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThreadState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ThreadState& from) {
    ThreadState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.dualarm.ThreadState";
  }
  protected:
  explicit ThreadState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtrlPeriodMsFieldNumber = 1,
    kCtrlLoadMsFieldNumber = 2,
  };
  // double ctrlPeriod_ms = 1;
  void clear_ctrlperiod_ms();
  double ctrlperiod_ms() const;
  void set_ctrlperiod_ms(double value);
  private:
  double _internal_ctrlperiod_ms() const;
  void _internal_set_ctrlperiod_ms(double value);
  public:

  // double ctrlLoad_ms = 2;
  void clear_ctrlload_ms();
  double ctrlload_ms() const;
  void set_ctrlload_ms(double value);
  private:
  double _internal_ctrlload_ms() const;
  void _internal_set_ctrlload_ms(double value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.dualarm.ThreadState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double ctrlperiod_ms_;
    double ctrlload_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DualArm_2eproto;
};
// -------------------------------------------------------------------

class TaskState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.dualarm.TaskState) */ {
 public:
  inline TaskState() : TaskState(nullptr) {}
  ~TaskState() override;
  explicit PROTOBUF_CONSTEXPR TaskState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskState(const TaskState& from);
  TaskState(TaskState&& from) noexcept
    : TaskState() {
    *this = ::std::move(from);
  }

  inline TaskState& operator=(const TaskState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskState& operator=(TaskState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskState* internal_default_instance() {
    return reinterpret_cast<const TaskState*>(
               &_TaskState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskState& a, TaskState& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskState& from) {
    TaskState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.dualarm.TaskState";
  }
  protected:
  explicit TaskState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kRotFieldNumber = 2,
    kLinVelFieldNumber = 3,
    kAngVelFieldNumber = 4,
    kForceFieldNumber = 5,
    kMomentFieldNumber = 6,
    kIdFieldNumber = 7,
  };
  // .dtproto.geometry_msgs.Point3d pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::dtproto::geometry_msgs::Point3d& pos() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_pos();
  ::dtproto::geometry_msgs::Point3d* mutable_pos();
  void set_allocated_pos(::dtproto::geometry_msgs::Point3d* pos);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_pos() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::dtproto::geometry_msgs::Point3d* pos);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_pos();

  // .dtproto.geometry_msgs.Point3d rot = 2;
  bool has_rot() const;
  private:
  bool _internal_has_rot() const;
  public:
  void clear_rot();
  const ::dtproto::geometry_msgs::Point3d& rot() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_rot();
  ::dtproto::geometry_msgs::Point3d* mutable_rot();
  void set_allocated_rot(::dtproto::geometry_msgs::Point3d* rot);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_rot() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_rot();
  public:
  void unsafe_arena_set_allocated_rot(
      ::dtproto::geometry_msgs::Point3d* rot);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_rot();

  // .dtproto.geometry_msgs.Point3d linVel = 3;
  bool has_linvel() const;
  private:
  bool _internal_has_linvel() const;
  public:
  void clear_linvel();
  const ::dtproto::geometry_msgs::Point3d& linvel() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_linvel();
  ::dtproto::geometry_msgs::Point3d* mutable_linvel();
  void set_allocated_linvel(::dtproto::geometry_msgs::Point3d* linvel);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_linvel() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_linvel();
  public:
  void unsafe_arena_set_allocated_linvel(
      ::dtproto::geometry_msgs::Point3d* linvel);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_linvel();

  // .dtproto.geometry_msgs.Point3d angVel = 4;
  bool has_angvel() const;
  private:
  bool _internal_has_angvel() const;
  public:
  void clear_angvel();
  const ::dtproto::geometry_msgs::Point3d& angvel() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_angvel();
  ::dtproto::geometry_msgs::Point3d* mutable_angvel();
  void set_allocated_angvel(::dtproto::geometry_msgs::Point3d* angvel);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_angvel() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_angvel();
  public:
  void unsafe_arena_set_allocated_angvel(
      ::dtproto::geometry_msgs::Point3d* angvel);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_angvel();

  // .dtproto.geometry_msgs.Point3d force = 5;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  const ::dtproto::geometry_msgs::Point3d& force() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_force();
  ::dtproto::geometry_msgs::Point3d* mutable_force();
  void set_allocated_force(::dtproto::geometry_msgs::Point3d* force);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_force() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_force();
  public:
  void unsafe_arena_set_allocated_force(
      ::dtproto::geometry_msgs::Point3d* force);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_force();

  // .dtproto.geometry_msgs.Point3d moment = 6;
  bool has_moment() const;
  private:
  bool _internal_has_moment() const;
  public:
  void clear_moment();
  const ::dtproto::geometry_msgs::Point3d& moment() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_moment();
  ::dtproto::geometry_msgs::Point3d* mutable_moment();
  void set_allocated_moment(::dtproto::geometry_msgs::Point3d* moment);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_moment() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_moment();
  public:
  void unsafe_arena_set_allocated_moment(
      ::dtproto::geometry_msgs::Point3d* moment);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_moment();

  // uint32 id = 7;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.dualarm.TaskState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dtproto::geometry_msgs::Point3d* pos_;
    ::dtproto::geometry_msgs::Point3d* rot_;
    ::dtproto::geometry_msgs::Point3d* linvel_;
    ::dtproto::geometry_msgs::Point3d* angvel_;
    ::dtproto::geometry_msgs::Point3d* force_;
    ::dtproto::geometry_msgs::Point3d* moment_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DualArm_2eproto;
};
// -------------------------------------------------------------------

class JointState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.dualarm.JointState) */ {
 public:
  inline JointState() : JointState(nullptr) {}
  ~JointState() override;
  explicit PROTOBUF_CONSTEXPR JointState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointState(const JointState& from);
  JointState(JointState&& from) noexcept
    : JointState() {
    *this = ::std::move(from);
  }

  inline JointState& operator=(const JointState& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointState& operator=(JointState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointState& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointState* internal_default_instance() {
    return reinterpret_cast<const JointState*>(
               &_JointState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JointState& a, JointState& b) {
    a.Swap(&b);
  }
  inline void Swap(JointState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JointState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JointState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JointState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JointState& from) {
    JointState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.dualarm.JointState";
  }
  protected:
  explicit JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusWordFieldNumber = 1,
    kControlWordFieldNumber = 2,
    kIncPosOfsCntFieldNumber = 3,
    kAbsPosOfsCntFieldNumber = 4,
    kIncPosCntFieldNumber = 5,
    kAbsPosCntFieldNumber = 6,
    kIncVelCpsFieldNumber = 7,
    kMcuTempCFieldNumber = 8,
    kInvTempCFieldNumber = 9,
    kInputVoltVFieldNumber = 10,
  };
  // uint32 statusWord = 1;
  void clear_statusword();
  uint32_t statusword() const;
  void set_statusword(uint32_t value);
  private:
  uint32_t _internal_statusword() const;
  void _internal_set_statusword(uint32_t value);
  public:

  // uint32 controlWord = 2;
  void clear_controlword();
  uint32_t controlword() const;
  void set_controlword(uint32_t value);
  private:
  uint32_t _internal_controlword() const;
  void _internal_set_controlword(uint32_t value);
  public:

  // int32 incPosOfs_cnt = 3;
  void clear_incposofs_cnt();
  int32_t incposofs_cnt() const;
  void set_incposofs_cnt(int32_t value);
  private:
  int32_t _internal_incposofs_cnt() const;
  void _internal_set_incposofs_cnt(int32_t value);
  public:

  // int32 absPosOfs_cnt = 4;
  void clear_absposofs_cnt();
  int32_t absposofs_cnt() const;
  void set_absposofs_cnt(int32_t value);
  private:
  int32_t _internal_absposofs_cnt() const;
  void _internal_set_absposofs_cnt(int32_t value);
  public:

  // int32 incPos_cnt = 5;
  void clear_incpos_cnt();
  int32_t incpos_cnt() const;
  void set_incpos_cnt(int32_t value);
  private:
  int32_t _internal_incpos_cnt() const;
  void _internal_set_incpos_cnt(int32_t value);
  public:

  // int32 absPos_cnt = 6;
  void clear_abspos_cnt();
  int32_t abspos_cnt() const;
  void set_abspos_cnt(int32_t value);
  private:
  int32_t _internal_abspos_cnt() const;
  void _internal_set_abspos_cnt(int32_t value);
  public:

  // int32 incVel_cps = 7;
  void clear_incvel_cps();
  int32_t incvel_cps() const;
  void set_incvel_cps(int32_t value);
  private:
  int32_t _internal_incvel_cps() const;
  void _internal_set_incvel_cps(int32_t value);
  public:

  // float mcuTemp_C = 8;
  void clear_mcutemp_c();
  float mcutemp_c() const;
  void set_mcutemp_c(float value);
  private:
  float _internal_mcutemp_c() const;
  void _internal_set_mcutemp_c(float value);
  public:

  // float invTemp_C = 9;
  void clear_invtemp_c();
  float invtemp_c() const;
  void set_invtemp_c(float value);
  private:
  float _internal_invtemp_c() const;
  void _internal_set_invtemp_c(float value);
  public:

  // float inputVolt_V = 10;
  void clear_inputvolt_v();
  float inputvolt_v() const;
  void set_inputvolt_v(float value);
  private:
  float _internal_inputvolt_v() const;
  void _internal_set_inputvolt_v(float value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.dualarm.JointState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t statusword_;
    uint32_t controlword_;
    int32_t incposofs_cnt_;
    int32_t absposofs_cnt_;
    int32_t incpos_cnt_;
    int32_t abspos_cnt_;
    int32_t incvel_cps_;
    float mcutemp_c_;
    float invtemp_c_;
    float inputvolt_v_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DualArm_2eproto;
};
// -------------------------------------------------------------------

class JointData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.dualarm.JointData) */ {
 public:
  inline JointData() : JointData(nullptr) {}
  ~JointData() override;
  explicit PROTOBUF_CONSTEXPR JointData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointData(const JointData& from);
  JointData(JointData&& from) noexcept
    : JointData() {
    *this = ::std::move(from);
  }

  inline JointData& operator=(const JointData& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointData& operator=(JointData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointData& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointData* internal_default_instance() {
    return reinterpret_cast<const JointData*>(
               &_JointData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JointData& a, JointData& b) {
    a.Swap(&b);
  }
  inline void Swap(JointData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JointData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JointData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JointData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JointData& from) {
    JointData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.dualarm.JointData";
  }
  protected:
  explicit JointData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosRadFieldNumber = 1,
    kPosAuxRadFieldNumber = 2,
    kVelRpsFieldNumber = 3,
    kAccRpssFieldNumber = 4,
    kTorqNmFieldNumber = 5,
  };
  // double pos_rad = 1;
  void clear_pos_rad();
  double pos_rad() const;
  void set_pos_rad(double value);
  private:
  double _internal_pos_rad() const;
  void _internal_set_pos_rad(double value);
  public:

  // double posAux_rad = 2;
  void clear_posaux_rad();
  double posaux_rad() const;
  void set_posaux_rad(double value);
  private:
  double _internal_posaux_rad() const;
  void _internal_set_posaux_rad(double value);
  public:

  // double vel_rps = 3;
  void clear_vel_rps();
  double vel_rps() const;
  void set_vel_rps(double value);
  private:
  double _internal_vel_rps() const;
  void _internal_set_vel_rps(double value);
  public:

  // double acc_rpss = 4;
  void clear_acc_rpss();
  double acc_rpss() const;
  void set_acc_rpss(double value);
  private:
  double _internal_acc_rpss() const;
  void _internal_set_acc_rpss(double value);
  public:

  // double torq_Nm = 5;
  void clear_torq_nm();
  double torq_nm() const;
  void set_torq_nm(double value);
  private:
  double _internal_torq_nm() const;
  void _internal_set_torq_nm(double value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.dualarm.JointData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double pos_rad_;
    double posaux_rad_;
    double vel_rps_;
    double acc_rpss_;
    double torq_nm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DualArm_2eproto;
};
// -------------------------------------------------------------------

class ControlState final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dtproto.dualarm.ControlState) */ {
 public:
  inline ControlState() : ControlState(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ControlState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlState(const ControlState& from);
  ControlState(ControlState&& from) noexcept
    : ControlState() {
    *this = ::std::move(from);
  }

  inline ControlState& operator=(const ControlState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlState& operator=(ControlState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlState* internal_default_instance() {
    return reinterpret_cast<const ControlState*>(
               &_ControlState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ControlState& a, ControlState& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ControlState& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ControlState& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.dualarm.ControlState";
  }
  protected:
  explicit ControlState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dtproto.dualarm.ControlState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_DualArm_2eproto;
};
// -------------------------------------------------------------------

class DualArmState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.dualarm.DualArmState) */ {
 public:
  inline DualArmState() : DualArmState(nullptr) {}
  ~DualArmState() override;
  explicit PROTOBUF_CONSTEXPR DualArmState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DualArmState(const DualArmState& from);
  DualArmState(DualArmState&& from) noexcept
    : DualArmState() {
    *this = ::std::move(from);
  }

  inline DualArmState& operator=(const DualArmState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DualArmState& operator=(DualArmState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DualArmState& default_instance() {
    return *internal_default_instance();
  }
  static inline const DualArmState* internal_default_instance() {
    return reinterpret_cast<const DualArmState*>(
               &_DualArmState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DualArmState& a, DualArmState& b) {
    a.Swap(&b);
  }
  inline void Swap(DualArmState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DualArmState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DualArmState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DualArmState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DualArmState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DualArmState& from) {
    DualArmState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DualArmState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.dualarm.DualArmState";
  }
  protected:
  explicit DualArmState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointStateFieldNumber = 1,
    kActJointDataFieldNumber = 2,
    kDesJointDataFieldNumber = 3,
    kGripperStateFieldNumber = 4,
    kActGripperDataFieldNumber = 5,
    kDesGripperDataFieldNumber = 6,
    kActTaskStateFieldNumber = 7,
    kDesTaskStateFieldNumber = 8,
    kActControlStateFieldNumber = 9,
    kDesControlStateFieldNumber = 10,
    kThreadStateFieldNumber = 11,
    kArbitraryStateFieldNumber = 20,
    kArbitraryStateXYFieldNumber = 21,
  };
  // repeated .dtproto.dualarm.JointState jointState = 1;
  int jointstate_size() const;
  private:
  int _internal_jointstate_size() const;
  public:
  void clear_jointstate();
  ::dtproto::dualarm::JointState* mutable_jointstate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointState >*
      mutable_jointstate();
  private:
  const ::dtproto::dualarm::JointState& _internal_jointstate(int index) const;
  ::dtproto::dualarm::JointState* _internal_add_jointstate();
  public:
  const ::dtproto::dualarm::JointState& jointstate(int index) const;
  ::dtproto::dualarm::JointState* add_jointstate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointState >&
      jointstate() const;

  // repeated .dtproto.dualarm.JointData actJointData = 2;
  int actjointdata_size() const;
  private:
  int _internal_actjointdata_size() const;
  public:
  void clear_actjointdata();
  ::dtproto::dualarm::JointData* mutable_actjointdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >*
      mutable_actjointdata();
  private:
  const ::dtproto::dualarm::JointData& _internal_actjointdata(int index) const;
  ::dtproto::dualarm::JointData* _internal_add_actjointdata();
  public:
  const ::dtproto::dualarm::JointData& actjointdata(int index) const;
  ::dtproto::dualarm::JointData* add_actjointdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >&
      actjointdata() const;

  // repeated .dtproto.dualarm.JointData desJointData = 3;
  int desjointdata_size() const;
  private:
  int _internal_desjointdata_size() const;
  public:
  void clear_desjointdata();
  ::dtproto::dualarm::JointData* mutable_desjointdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >*
      mutable_desjointdata();
  private:
  const ::dtproto::dualarm::JointData& _internal_desjointdata(int index) const;
  ::dtproto::dualarm::JointData* _internal_add_desjointdata();
  public:
  const ::dtproto::dualarm::JointData& desjointdata(int index) const;
  ::dtproto::dualarm::JointData* add_desjointdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >&
      desjointdata() const;

  // repeated .dtproto.dualarm.JointState gripperState = 4;
  int gripperstate_size() const;
  private:
  int _internal_gripperstate_size() const;
  public:
  void clear_gripperstate();
  ::dtproto::dualarm::JointState* mutable_gripperstate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointState >*
      mutable_gripperstate();
  private:
  const ::dtproto::dualarm::JointState& _internal_gripperstate(int index) const;
  ::dtproto::dualarm::JointState* _internal_add_gripperstate();
  public:
  const ::dtproto::dualarm::JointState& gripperstate(int index) const;
  ::dtproto::dualarm::JointState* add_gripperstate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointState >&
      gripperstate() const;

  // repeated .dtproto.dualarm.JointData actGripperData = 5;
  int actgripperdata_size() const;
  private:
  int _internal_actgripperdata_size() const;
  public:
  void clear_actgripperdata();
  ::dtproto::dualarm::JointData* mutable_actgripperdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >*
      mutable_actgripperdata();
  private:
  const ::dtproto::dualarm::JointData& _internal_actgripperdata(int index) const;
  ::dtproto::dualarm::JointData* _internal_add_actgripperdata();
  public:
  const ::dtproto::dualarm::JointData& actgripperdata(int index) const;
  ::dtproto::dualarm::JointData* add_actgripperdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >&
      actgripperdata() const;

  // repeated .dtproto.dualarm.JointData desGripperData = 6;
  int desgripperdata_size() const;
  private:
  int _internal_desgripperdata_size() const;
  public:
  void clear_desgripperdata();
  ::dtproto::dualarm::JointData* mutable_desgripperdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >*
      mutable_desgripperdata();
  private:
  const ::dtproto::dualarm::JointData& _internal_desgripperdata(int index) const;
  ::dtproto::dualarm::JointData* _internal_add_desgripperdata();
  public:
  const ::dtproto::dualarm::JointData& desgripperdata(int index) const;
  ::dtproto::dualarm::JointData* add_desgripperdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >&
      desgripperdata() const;

  // repeated .dtproto.dualarm.TaskState actTaskState = 7;
  int acttaskstate_size() const;
  private:
  int _internal_acttaskstate_size() const;
  public:
  void clear_acttaskstate();
  ::dtproto::dualarm::TaskState* mutable_acttaskstate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::TaskState >*
      mutable_acttaskstate();
  private:
  const ::dtproto::dualarm::TaskState& _internal_acttaskstate(int index) const;
  ::dtproto::dualarm::TaskState* _internal_add_acttaskstate();
  public:
  const ::dtproto::dualarm::TaskState& acttaskstate(int index) const;
  ::dtproto::dualarm::TaskState* add_acttaskstate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::TaskState >&
      acttaskstate() const;

  // repeated .dtproto.dualarm.TaskState desTaskState = 8;
  int destaskstate_size() const;
  private:
  int _internal_destaskstate_size() const;
  public:
  void clear_destaskstate();
  ::dtproto::dualarm::TaskState* mutable_destaskstate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::TaskState >*
      mutable_destaskstate();
  private:
  const ::dtproto::dualarm::TaskState& _internal_destaskstate(int index) const;
  ::dtproto::dualarm::TaskState* _internal_add_destaskstate();
  public:
  const ::dtproto::dualarm::TaskState& destaskstate(int index) const;
  ::dtproto::dualarm::TaskState* add_destaskstate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::TaskState >&
      destaskstate() const;

  // .dtproto.dualarm.ControlState actControlState = 9;
  bool has_actcontrolstate() const;
  private:
  bool _internal_has_actcontrolstate() const;
  public:
  void clear_actcontrolstate();
  const ::dtproto::dualarm::ControlState& actcontrolstate() const;
  PROTOBUF_NODISCARD ::dtproto::dualarm::ControlState* release_actcontrolstate();
  ::dtproto::dualarm::ControlState* mutable_actcontrolstate();
  void set_allocated_actcontrolstate(::dtproto::dualarm::ControlState* actcontrolstate);
  private:
  const ::dtproto::dualarm::ControlState& _internal_actcontrolstate() const;
  ::dtproto::dualarm::ControlState* _internal_mutable_actcontrolstate();
  public:
  void unsafe_arena_set_allocated_actcontrolstate(
      ::dtproto::dualarm::ControlState* actcontrolstate);
  ::dtproto::dualarm::ControlState* unsafe_arena_release_actcontrolstate();

  // .dtproto.dualarm.ControlState desControlState = 10;
  bool has_descontrolstate() const;
  private:
  bool _internal_has_descontrolstate() const;
  public:
  void clear_descontrolstate();
  const ::dtproto::dualarm::ControlState& descontrolstate() const;
  PROTOBUF_NODISCARD ::dtproto::dualarm::ControlState* release_descontrolstate();
  ::dtproto::dualarm::ControlState* mutable_descontrolstate();
  void set_allocated_descontrolstate(::dtproto::dualarm::ControlState* descontrolstate);
  private:
  const ::dtproto::dualarm::ControlState& _internal_descontrolstate() const;
  ::dtproto::dualarm::ControlState* _internal_mutable_descontrolstate();
  public:
  void unsafe_arena_set_allocated_descontrolstate(
      ::dtproto::dualarm::ControlState* descontrolstate);
  ::dtproto::dualarm::ControlState* unsafe_arena_release_descontrolstate();

  // .dtproto.dualarm.ThreadState threadState = 11;
  bool has_threadstate() const;
  private:
  bool _internal_has_threadstate() const;
  public:
  void clear_threadstate();
  const ::dtproto::dualarm::ThreadState& threadstate() const;
  PROTOBUF_NODISCARD ::dtproto::dualarm::ThreadState* release_threadstate();
  ::dtproto::dualarm::ThreadState* mutable_threadstate();
  void set_allocated_threadstate(::dtproto::dualarm::ThreadState* threadstate);
  private:
  const ::dtproto::dualarm::ThreadState& _internal_threadstate() const;
  ::dtproto::dualarm::ThreadState* _internal_mutable_threadstate();
  public:
  void unsafe_arena_set_allocated_threadstate(
      ::dtproto::dualarm::ThreadState* threadstate);
  ::dtproto::dualarm::ThreadState* unsafe_arena_release_threadstate();

  // .dtproto.std_msgs.PackedDouble arbitraryState = 20;
  bool has_arbitrarystate() const;
  private:
  bool _internal_has_arbitrarystate() const;
  public:
  void clear_arbitrarystate();
  const ::dtproto::std_msgs::PackedDouble& arbitrarystate() const;
  PROTOBUF_NODISCARD ::dtproto::std_msgs::PackedDouble* release_arbitrarystate();
  ::dtproto::std_msgs::PackedDouble* mutable_arbitrarystate();
  void set_allocated_arbitrarystate(::dtproto::std_msgs::PackedDouble* arbitrarystate);
  private:
  const ::dtproto::std_msgs::PackedDouble& _internal_arbitrarystate() const;
  ::dtproto::std_msgs::PackedDouble* _internal_mutable_arbitrarystate();
  public:
  void unsafe_arena_set_allocated_arbitrarystate(
      ::dtproto::std_msgs::PackedDouble* arbitrarystate);
  ::dtproto::std_msgs::PackedDouble* unsafe_arena_release_arbitrarystate();

  // .dtproto.std_msgs.PackedDouble arbitraryStateXY = 21;
  bool has_arbitrarystatexy() const;
  private:
  bool _internal_has_arbitrarystatexy() const;
  public:
  void clear_arbitrarystatexy();
  const ::dtproto::std_msgs::PackedDouble& arbitrarystatexy() const;
  PROTOBUF_NODISCARD ::dtproto::std_msgs::PackedDouble* release_arbitrarystatexy();
  ::dtproto::std_msgs::PackedDouble* mutable_arbitrarystatexy();
  void set_allocated_arbitrarystatexy(::dtproto::std_msgs::PackedDouble* arbitrarystatexy);
  private:
  const ::dtproto::std_msgs::PackedDouble& _internal_arbitrarystatexy() const;
  ::dtproto::std_msgs::PackedDouble* _internal_mutable_arbitrarystatexy();
  public:
  void unsafe_arena_set_allocated_arbitrarystatexy(
      ::dtproto::std_msgs::PackedDouble* arbitrarystatexy);
  ::dtproto::std_msgs::PackedDouble* unsafe_arena_release_arbitrarystatexy();

  // @@protoc_insertion_point(class_scope:dtproto.dualarm.DualArmState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointState > jointstate_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData > actjointdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData > desjointdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointState > gripperstate_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData > actgripperdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData > desgripperdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::TaskState > acttaskstate_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::TaskState > destaskstate_;
    ::dtproto::dualarm::ControlState* actcontrolstate_;
    ::dtproto::dualarm::ControlState* descontrolstate_;
    ::dtproto::dualarm::ThreadState* threadstate_;
    ::dtproto::std_msgs::PackedDouble* arbitrarystate_;
    ::dtproto::std_msgs::PackedDouble* arbitrarystatexy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DualArm_2eproto;
};
// -------------------------------------------------------------------

class DualArmStateTimeStamped final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.dualarm.DualArmStateTimeStamped) */ {
 public:
  inline DualArmStateTimeStamped() : DualArmStateTimeStamped(nullptr) {}
  ~DualArmStateTimeStamped() override;
  explicit PROTOBUF_CONSTEXPR DualArmStateTimeStamped(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DualArmStateTimeStamped(const DualArmStateTimeStamped& from);
  DualArmStateTimeStamped(DualArmStateTimeStamped&& from) noexcept
    : DualArmStateTimeStamped() {
    *this = ::std::move(from);
  }

  inline DualArmStateTimeStamped& operator=(const DualArmStateTimeStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline DualArmStateTimeStamped& operator=(DualArmStateTimeStamped&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DualArmStateTimeStamped& default_instance() {
    return *internal_default_instance();
  }
  static inline const DualArmStateTimeStamped* internal_default_instance() {
    return reinterpret_cast<const DualArmStateTimeStamped*>(
               &_DualArmStateTimeStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DualArmStateTimeStamped& a, DualArmStateTimeStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(DualArmStateTimeStamped* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DualArmStateTimeStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DualArmStateTimeStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DualArmStateTimeStamped>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DualArmStateTimeStamped& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DualArmStateTimeStamped& from) {
    DualArmStateTimeStamped::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DualArmStateTimeStamped* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.dualarm.DualArmStateTimeStamped";
  }
  protected:
  explicit DualArmStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .dtproto.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::dtproto::std_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::dtproto::std_msgs::Header* release_header();
  ::dtproto::std_msgs::Header* mutable_header();
  void set_allocated_header(::dtproto::std_msgs::Header* header);
  private:
  const ::dtproto::std_msgs::Header& _internal_header() const;
  ::dtproto::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::dtproto::std_msgs::Header* header);
  ::dtproto::std_msgs::Header* unsafe_arena_release_header();

  // .dtproto.dualarm.DualArmState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::dtproto::dualarm::DualArmState& state() const;
  PROTOBUF_NODISCARD ::dtproto::dualarm::DualArmState* release_state();
  ::dtproto::dualarm::DualArmState* mutable_state();
  void set_allocated_state(::dtproto::dualarm::DualArmState* state);
  private:
  const ::dtproto::dualarm::DualArmState& _internal_state() const;
  ::dtproto::dualarm::DualArmState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::dtproto::dualarm::DualArmState* state);
  ::dtproto::dualarm::DualArmState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:dtproto.dualarm.DualArmStateTimeStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dtproto::std_msgs::Header* header_;
    ::dtproto::dualarm::DualArmState* state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DualArm_2eproto;
};
// -------------------------------------------------------------------

class OperationState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.dualarm.OperationState) */ {
 public:
  inline OperationState() : OperationState(nullptr) {}
  ~OperationState() override;
  explicit PROTOBUF_CONSTEXPR OperationState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationState(const OperationState& from);
  OperationState(OperationState&& from) noexcept
    : OperationState() {
    *this = ::std::move(from);
  }

  inline OperationState& operator=(const OperationState& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationState& operator=(OperationState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationState& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationState* internal_default_instance() {
    return reinterpret_cast<const OperationState*>(
               &_OperationState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OperationState& a, OperationState& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationState& from) {
    OperationState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.dualarm.OperationState";
  }
  protected:
  explicit OperationState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpModeFieldNumber = 1,
    kOpStatusFieldNumber = 2,
  };
  // int32 op_mode = 1;
  void clear_op_mode();
  int32_t op_mode() const;
  void set_op_mode(int32_t value);
  private:
  int32_t _internal_op_mode() const;
  void _internal_set_op_mode(int32_t value);
  public:

  // int32 op_status = 2;
  void clear_op_status();
  int32_t op_status() const;
  void set_op_status(int32_t value);
  private:
  int32_t _internal_op_status() const;
  void _internal_set_op_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.dualarm.OperationState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t op_mode_;
    int32_t op_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DualArm_2eproto;
};
// -------------------------------------------------------------------

class OperationStateTimeStamped final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.dualarm.OperationStateTimeStamped) */ {
 public:
  inline OperationStateTimeStamped() : OperationStateTimeStamped(nullptr) {}
  ~OperationStateTimeStamped() override;
  explicit PROTOBUF_CONSTEXPR OperationStateTimeStamped(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationStateTimeStamped(const OperationStateTimeStamped& from);
  OperationStateTimeStamped(OperationStateTimeStamped&& from) noexcept
    : OperationStateTimeStamped() {
    *this = ::std::move(from);
  }

  inline OperationStateTimeStamped& operator=(const OperationStateTimeStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStateTimeStamped& operator=(OperationStateTimeStamped&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationStateTimeStamped& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStateTimeStamped* internal_default_instance() {
    return reinterpret_cast<const OperationStateTimeStamped*>(
               &_OperationStateTimeStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OperationStateTimeStamped& a, OperationStateTimeStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationStateTimeStamped* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStateTimeStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationStateTimeStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationStateTimeStamped>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationStateTimeStamped& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationStateTimeStamped& from) {
    OperationStateTimeStamped::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationStateTimeStamped* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.dualarm.OperationStateTimeStamped";
  }
  protected:
  explicit OperationStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .dtproto.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::dtproto::std_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::dtproto::std_msgs::Header* release_header();
  ::dtproto::std_msgs::Header* mutable_header();
  void set_allocated_header(::dtproto::std_msgs::Header* header);
  private:
  const ::dtproto::std_msgs::Header& _internal_header() const;
  ::dtproto::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::dtproto::std_msgs::Header* header);
  ::dtproto::std_msgs::Header* unsafe_arena_release_header();

  // .dtproto.dualarm.OperationState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::dtproto::dualarm::OperationState& state() const;
  PROTOBUF_NODISCARD ::dtproto::dualarm::OperationState* release_state();
  ::dtproto::dualarm::OperationState* mutable_state();
  void set_allocated_state(::dtproto::dualarm::OperationState* state);
  private:
  const ::dtproto::dualarm::OperationState& _internal_state() const;
  ::dtproto::dualarm::OperationState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::dtproto::dualarm::OperationState* state);
  ::dtproto::dualarm::OperationState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:dtproto.dualarm.OperationStateTimeStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dtproto::std_msgs::Header* header_;
    ::dtproto::dualarm::OperationState* state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DualArm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThreadState

// double ctrlPeriod_ms = 1;
inline void ThreadState::clear_ctrlperiod_ms() {
  _impl_.ctrlperiod_ms_ = 0;
}
inline double ThreadState::_internal_ctrlperiod_ms() const {
  return _impl_.ctrlperiod_ms_;
}
inline double ThreadState::ctrlperiod_ms() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.ThreadState.ctrlPeriod_ms)
  return _internal_ctrlperiod_ms();
}
inline void ThreadState::_internal_set_ctrlperiod_ms(double value) {
  
  _impl_.ctrlperiod_ms_ = value;
}
inline void ThreadState::set_ctrlperiod_ms(double value) {
  _internal_set_ctrlperiod_ms(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.ThreadState.ctrlPeriod_ms)
}

// double ctrlLoad_ms = 2;
inline void ThreadState::clear_ctrlload_ms() {
  _impl_.ctrlload_ms_ = 0;
}
inline double ThreadState::_internal_ctrlload_ms() const {
  return _impl_.ctrlload_ms_;
}
inline double ThreadState::ctrlload_ms() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.ThreadState.ctrlLoad_ms)
  return _internal_ctrlload_ms();
}
inline void ThreadState::_internal_set_ctrlload_ms(double value) {
  
  _impl_.ctrlload_ms_ = value;
}
inline void ThreadState::set_ctrlload_ms(double value) {
  _internal_set_ctrlload_ms(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.ThreadState.ctrlLoad_ms)
}

// -------------------------------------------------------------------

// TaskState

// .dtproto.geometry_msgs.Point3d pos = 1;
inline bool TaskState::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool TaskState::has_pos() const {
  return _internal_has_pos();
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::_internal_pos() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::pos() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.TaskState.pos)
  return _internal_pos();
}
inline void TaskState::unsafe_arena_set_allocated_pos(
    ::dtproto::geometry_msgs::Point3d* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.TaskState.pos)
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::release_pos() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.TaskState.pos)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::mutable_pos() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.TaskState.pos)
  return _msg;
}
inline void TaskState::set_allocated_pos(::dtproto::geometry_msgs::Point3d* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.TaskState.pos)
}

// .dtproto.geometry_msgs.Point3d rot = 2;
inline bool TaskState::_internal_has_rot() const {
  return this != internal_default_instance() && _impl_.rot_ != nullptr;
}
inline bool TaskState::has_rot() const {
  return _internal_has_rot();
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::_internal_rot() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::rot() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.TaskState.rot)
  return _internal_rot();
}
inline void TaskState::unsafe_arena_set_allocated_rot(
    ::dtproto::geometry_msgs::Point3d* rot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rot_);
  }
  _impl_.rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.TaskState.rot)
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::release_rot() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.rot_;
  _impl_.rot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::unsafe_arena_release_rot() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.TaskState.rot)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.rot_;
  _impl_.rot_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::_internal_mutable_rot() {
  
  if (_impl_.rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.rot_ = p;
  }
  return _impl_.rot_;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::mutable_rot() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_rot();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.TaskState.rot)
  return _msg;
}
inline void TaskState::set_allocated_rot(::dtproto::geometry_msgs::Point3d* rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rot_);
  }
  if (rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rot));
    if (message_arena != submessage_arena) {
      rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rot_ = rot;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.TaskState.rot)
}

// .dtproto.geometry_msgs.Point3d linVel = 3;
inline bool TaskState::_internal_has_linvel() const {
  return this != internal_default_instance() && _impl_.linvel_ != nullptr;
}
inline bool TaskState::has_linvel() const {
  return _internal_has_linvel();
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::_internal_linvel() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.linvel_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::linvel() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.TaskState.linVel)
  return _internal_linvel();
}
inline void TaskState::unsafe_arena_set_allocated_linvel(
    ::dtproto::geometry_msgs::Point3d* linvel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.linvel_);
  }
  _impl_.linvel_ = linvel;
  if (linvel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.TaskState.linVel)
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::release_linvel() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.linvel_;
  _impl_.linvel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::unsafe_arena_release_linvel() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.TaskState.linVel)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.linvel_;
  _impl_.linvel_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::_internal_mutable_linvel() {
  
  if (_impl_.linvel_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.linvel_ = p;
  }
  return _impl_.linvel_;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::mutable_linvel() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_linvel();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.TaskState.linVel)
  return _msg;
}
inline void TaskState::set_allocated_linvel(::dtproto::geometry_msgs::Point3d* linvel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.linvel_);
  }
  if (linvel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linvel));
    if (message_arena != submessage_arena) {
      linvel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linvel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.linvel_ = linvel;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.TaskState.linVel)
}

// .dtproto.geometry_msgs.Point3d angVel = 4;
inline bool TaskState::_internal_has_angvel() const {
  return this != internal_default_instance() && _impl_.angvel_ != nullptr;
}
inline bool TaskState::has_angvel() const {
  return _internal_has_angvel();
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::_internal_angvel() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.angvel_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::angvel() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.TaskState.angVel)
  return _internal_angvel();
}
inline void TaskState::unsafe_arena_set_allocated_angvel(
    ::dtproto::geometry_msgs::Point3d* angvel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angvel_);
  }
  _impl_.angvel_ = angvel;
  if (angvel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.TaskState.angVel)
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::release_angvel() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.angvel_;
  _impl_.angvel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::unsafe_arena_release_angvel() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.TaskState.angVel)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.angvel_;
  _impl_.angvel_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::_internal_mutable_angvel() {
  
  if (_impl_.angvel_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.angvel_ = p;
  }
  return _impl_.angvel_;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::mutable_angvel() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_angvel();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.TaskState.angVel)
  return _msg;
}
inline void TaskState::set_allocated_angvel(::dtproto::geometry_msgs::Point3d* angvel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angvel_);
  }
  if (angvel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angvel));
    if (message_arena != submessage_arena) {
      angvel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angvel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angvel_ = angvel;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.TaskState.angVel)
}

// .dtproto.geometry_msgs.Point3d force = 5;
inline bool TaskState::_internal_has_force() const {
  return this != internal_default_instance() && _impl_.force_ != nullptr;
}
inline bool TaskState::has_force() const {
  return _internal_has_force();
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::_internal_force() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.force_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::force() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.TaskState.force)
  return _internal_force();
}
inline void TaskState::unsafe_arena_set_allocated_force(
    ::dtproto::geometry_msgs::Point3d* force) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.force_);
  }
  _impl_.force_ = force;
  if (force) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.TaskState.force)
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::release_force() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.force_;
  _impl_.force_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::unsafe_arena_release_force() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.TaskState.force)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.force_;
  _impl_.force_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::_internal_mutable_force() {
  
  if (_impl_.force_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.force_ = p;
  }
  return _impl_.force_;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::mutable_force() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_force();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.TaskState.force)
  return _msg;
}
inline void TaskState::set_allocated_force(::dtproto::geometry_msgs::Point3d* force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.force_);
  }
  if (force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(force));
    if (message_arena != submessage_arena) {
      force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.force_ = force;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.TaskState.force)
}

// .dtproto.geometry_msgs.Point3d moment = 6;
inline bool TaskState::_internal_has_moment() const {
  return this != internal_default_instance() && _impl_.moment_ != nullptr;
}
inline bool TaskState::has_moment() const {
  return _internal_has_moment();
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::_internal_moment() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.moment_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::moment() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.TaskState.moment)
  return _internal_moment();
}
inline void TaskState::unsafe_arena_set_allocated_moment(
    ::dtproto::geometry_msgs::Point3d* moment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.moment_);
  }
  _impl_.moment_ = moment;
  if (moment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.TaskState.moment)
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::release_moment() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.moment_;
  _impl_.moment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::unsafe_arena_release_moment() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.TaskState.moment)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.moment_;
  _impl_.moment_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::_internal_mutable_moment() {
  
  if (_impl_.moment_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.moment_ = p;
  }
  return _impl_.moment_;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::mutable_moment() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_moment();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.TaskState.moment)
  return _msg;
}
inline void TaskState::set_allocated_moment(::dtproto::geometry_msgs::Point3d* moment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.moment_);
  }
  if (moment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(moment));
    if (message_arena != submessage_arena) {
      moment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.moment_ = moment;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.TaskState.moment)
}

// uint32 id = 7;
inline void TaskState::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t TaskState::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t TaskState::id() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.TaskState.id)
  return _internal_id();
}
inline void TaskState::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void TaskState::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.TaskState.id)
}

// -------------------------------------------------------------------

// JointState

// uint32 statusWord = 1;
inline void JointState::clear_statusword() {
  _impl_.statusword_ = 0u;
}
inline uint32_t JointState::_internal_statusword() const {
  return _impl_.statusword_;
}
inline uint32_t JointState::statusword() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointState.statusWord)
  return _internal_statusword();
}
inline void JointState::_internal_set_statusword(uint32_t value) {
  
  _impl_.statusword_ = value;
}
inline void JointState::set_statusword(uint32_t value) {
  _internal_set_statusword(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointState.statusWord)
}

// uint32 controlWord = 2;
inline void JointState::clear_controlword() {
  _impl_.controlword_ = 0u;
}
inline uint32_t JointState::_internal_controlword() const {
  return _impl_.controlword_;
}
inline uint32_t JointState::controlword() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointState.controlWord)
  return _internal_controlword();
}
inline void JointState::_internal_set_controlword(uint32_t value) {
  
  _impl_.controlword_ = value;
}
inline void JointState::set_controlword(uint32_t value) {
  _internal_set_controlword(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointState.controlWord)
}

// int32 incPosOfs_cnt = 3;
inline void JointState::clear_incposofs_cnt() {
  _impl_.incposofs_cnt_ = 0;
}
inline int32_t JointState::_internal_incposofs_cnt() const {
  return _impl_.incposofs_cnt_;
}
inline int32_t JointState::incposofs_cnt() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointState.incPosOfs_cnt)
  return _internal_incposofs_cnt();
}
inline void JointState::_internal_set_incposofs_cnt(int32_t value) {
  
  _impl_.incposofs_cnt_ = value;
}
inline void JointState::set_incposofs_cnt(int32_t value) {
  _internal_set_incposofs_cnt(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointState.incPosOfs_cnt)
}

// int32 absPosOfs_cnt = 4;
inline void JointState::clear_absposofs_cnt() {
  _impl_.absposofs_cnt_ = 0;
}
inline int32_t JointState::_internal_absposofs_cnt() const {
  return _impl_.absposofs_cnt_;
}
inline int32_t JointState::absposofs_cnt() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointState.absPosOfs_cnt)
  return _internal_absposofs_cnt();
}
inline void JointState::_internal_set_absposofs_cnt(int32_t value) {
  
  _impl_.absposofs_cnt_ = value;
}
inline void JointState::set_absposofs_cnt(int32_t value) {
  _internal_set_absposofs_cnt(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointState.absPosOfs_cnt)
}

// int32 incPos_cnt = 5;
inline void JointState::clear_incpos_cnt() {
  _impl_.incpos_cnt_ = 0;
}
inline int32_t JointState::_internal_incpos_cnt() const {
  return _impl_.incpos_cnt_;
}
inline int32_t JointState::incpos_cnt() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointState.incPos_cnt)
  return _internal_incpos_cnt();
}
inline void JointState::_internal_set_incpos_cnt(int32_t value) {
  
  _impl_.incpos_cnt_ = value;
}
inline void JointState::set_incpos_cnt(int32_t value) {
  _internal_set_incpos_cnt(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointState.incPos_cnt)
}

// int32 absPos_cnt = 6;
inline void JointState::clear_abspos_cnt() {
  _impl_.abspos_cnt_ = 0;
}
inline int32_t JointState::_internal_abspos_cnt() const {
  return _impl_.abspos_cnt_;
}
inline int32_t JointState::abspos_cnt() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointState.absPos_cnt)
  return _internal_abspos_cnt();
}
inline void JointState::_internal_set_abspos_cnt(int32_t value) {
  
  _impl_.abspos_cnt_ = value;
}
inline void JointState::set_abspos_cnt(int32_t value) {
  _internal_set_abspos_cnt(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointState.absPos_cnt)
}

// int32 incVel_cps = 7;
inline void JointState::clear_incvel_cps() {
  _impl_.incvel_cps_ = 0;
}
inline int32_t JointState::_internal_incvel_cps() const {
  return _impl_.incvel_cps_;
}
inline int32_t JointState::incvel_cps() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointState.incVel_cps)
  return _internal_incvel_cps();
}
inline void JointState::_internal_set_incvel_cps(int32_t value) {
  
  _impl_.incvel_cps_ = value;
}
inline void JointState::set_incvel_cps(int32_t value) {
  _internal_set_incvel_cps(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointState.incVel_cps)
}

// float mcuTemp_C = 8;
inline void JointState::clear_mcutemp_c() {
  _impl_.mcutemp_c_ = 0;
}
inline float JointState::_internal_mcutemp_c() const {
  return _impl_.mcutemp_c_;
}
inline float JointState::mcutemp_c() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointState.mcuTemp_C)
  return _internal_mcutemp_c();
}
inline void JointState::_internal_set_mcutemp_c(float value) {
  
  _impl_.mcutemp_c_ = value;
}
inline void JointState::set_mcutemp_c(float value) {
  _internal_set_mcutemp_c(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointState.mcuTemp_C)
}

// float invTemp_C = 9;
inline void JointState::clear_invtemp_c() {
  _impl_.invtemp_c_ = 0;
}
inline float JointState::_internal_invtemp_c() const {
  return _impl_.invtemp_c_;
}
inline float JointState::invtemp_c() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointState.invTemp_C)
  return _internal_invtemp_c();
}
inline void JointState::_internal_set_invtemp_c(float value) {
  
  _impl_.invtemp_c_ = value;
}
inline void JointState::set_invtemp_c(float value) {
  _internal_set_invtemp_c(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointState.invTemp_C)
}

// float inputVolt_V = 10;
inline void JointState::clear_inputvolt_v() {
  _impl_.inputvolt_v_ = 0;
}
inline float JointState::_internal_inputvolt_v() const {
  return _impl_.inputvolt_v_;
}
inline float JointState::inputvolt_v() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointState.inputVolt_V)
  return _internal_inputvolt_v();
}
inline void JointState::_internal_set_inputvolt_v(float value) {
  
  _impl_.inputvolt_v_ = value;
}
inline void JointState::set_inputvolt_v(float value) {
  _internal_set_inputvolt_v(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointState.inputVolt_V)
}

// -------------------------------------------------------------------

// JointData

// double pos_rad = 1;
inline void JointData::clear_pos_rad() {
  _impl_.pos_rad_ = 0;
}
inline double JointData::_internal_pos_rad() const {
  return _impl_.pos_rad_;
}
inline double JointData::pos_rad() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointData.pos_rad)
  return _internal_pos_rad();
}
inline void JointData::_internal_set_pos_rad(double value) {
  
  _impl_.pos_rad_ = value;
}
inline void JointData::set_pos_rad(double value) {
  _internal_set_pos_rad(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointData.pos_rad)
}

// double posAux_rad = 2;
inline void JointData::clear_posaux_rad() {
  _impl_.posaux_rad_ = 0;
}
inline double JointData::_internal_posaux_rad() const {
  return _impl_.posaux_rad_;
}
inline double JointData::posaux_rad() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointData.posAux_rad)
  return _internal_posaux_rad();
}
inline void JointData::_internal_set_posaux_rad(double value) {
  
  _impl_.posaux_rad_ = value;
}
inline void JointData::set_posaux_rad(double value) {
  _internal_set_posaux_rad(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointData.posAux_rad)
}

// double vel_rps = 3;
inline void JointData::clear_vel_rps() {
  _impl_.vel_rps_ = 0;
}
inline double JointData::_internal_vel_rps() const {
  return _impl_.vel_rps_;
}
inline double JointData::vel_rps() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointData.vel_rps)
  return _internal_vel_rps();
}
inline void JointData::_internal_set_vel_rps(double value) {
  
  _impl_.vel_rps_ = value;
}
inline void JointData::set_vel_rps(double value) {
  _internal_set_vel_rps(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointData.vel_rps)
}

// double acc_rpss = 4;
inline void JointData::clear_acc_rpss() {
  _impl_.acc_rpss_ = 0;
}
inline double JointData::_internal_acc_rpss() const {
  return _impl_.acc_rpss_;
}
inline double JointData::acc_rpss() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointData.acc_rpss)
  return _internal_acc_rpss();
}
inline void JointData::_internal_set_acc_rpss(double value) {
  
  _impl_.acc_rpss_ = value;
}
inline void JointData::set_acc_rpss(double value) {
  _internal_set_acc_rpss(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointData.acc_rpss)
}

// double torq_Nm = 5;
inline void JointData::clear_torq_nm() {
  _impl_.torq_nm_ = 0;
}
inline double JointData::_internal_torq_nm() const {
  return _impl_.torq_nm_;
}
inline double JointData::torq_nm() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.JointData.torq_Nm)
  return _internal_torq_nm();
}
inline void JointData::_internal_set_torq_nm(double value) {
  
  _impl_.torq_nm_ = value;
}
inline void JointData::set_torq_nm(double value) {
  _internal_set_torq_nm(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.JointData.torq_Nm)
}

// -------------------------------------------------------------------

// ControlState

// -------------------------------------------------------------------

// DualArmState

// repeated .dtproto.dualarm.JointState jointState = 1;
inline int DualArmState::_internal_jointstate_size() const {
  return _impl_.jointstate_.size();
}
inline int DualArmState::jointstate_size() const {
  return _internal_jointstate_size();
}
inline void DualArmState::clear_jointstate() {
  _impl_.jointstate_.Clear();
}
inline ::dtproto::dualarm::JointState* DualArmState::mutable_jointstate(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.jointState)
  return _impl_.jointstate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointState >*
DualArmState::mutable_jointstate() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.dualarm.DualArmState.jointState)
  return &_impl_.jointstate_;
}
inline const ::dtproto::dualarm::JointState& DualArmState::_internal_jointstate(int index) const {
  return _impl_.jointstate_.Get(index);
}
inline const ::dtproto::dualarm::JointState& DualArmState::jointstate(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.jointState)
  return _internal_jointstate(index);
}
inline ::dtproto::dualarm::JointState* DualArmState::_internal_add_jointstate() {
  return _impl_.jointstate_.Add();
}
inline ::dtproto::dualarm::JointState* DualArmState::add_jointstate() {
  ::dtproto::dualarm::JointState* _add = _internal_add_jointstate();
  // @@protoc_insertion_point(field_add:dtproto.dualarm.DualArmState.jointState)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointState >&
DualArmState::jointstate() const {
  // @@protoc_insertion_point(field_list:dtproto.dualarm.DualArmState.jointState)
  return _impl_.jointstate_;
}

// repeated .dtproto.dualarm.JointData actJointData = 2;
inline int DualArmState::_internal_actjointdata_size() const {
  return _impl_.actjointdata_.size();
}
inline int DualArmState::actjointdata_size() const {
  return _internal_actjointdata_size();
}
inline void DualArmState::clear_actjointdata() {
  _impl_.actjointdata_.Clear();
}
inline ::dtproto::dualarm::JointData* DualArmState::mutable_actjointdata(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.actJointData)
  return _impl_.actjointdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >*
DualArmState::mutable_actjointdata() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.dualarm.DualArmState.actJointData)
  return &_impl_.actjointdata_;
}
inline const ::dtproto::dualarm::JointData& DualArmState::_internal_actjointdata(int index) const {
  return _impl_.actjointdata_.Get(index);
}
inline const ::dtproto::dualarm::JointData& DualArmState::actjointdata(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.actJointData)
  return _internal_actjointdata(index);
}
inline ::dtproto::dualarm::JointData* DualArmState::_internal_add_actjointdata() {
  return _impl_.actjointdata_.Add();
}
inline ::dtproto::dualarm::JointData* DualArmState::add_actjointdata() {
  ::dtproto::dualarm::JointData* _add = _internal_add_actjointdata();
  // @@protoc_insertion_point(field_add:dtproto.dualarm.DualArmState.actJointData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >&
DualArmState::actjointdata() const {
  // @@protoc_insertion_point(field_list:dtproto.dualarm.DualArmState.actJointData)
  return _impl_.actjointdata_;
}

// repeated .dtproto.dualarm.JointData desJointData = 3;
inline int DualArmState::_internal_desjointdata_size() const {
  return _impl_.desjointdata_.size();
}
inline int DualArmState::desjointdata_size() const {
  return _internal_desjointdata_size();
}
inline void DualArmState::clear_desjointdata() {
  _impl_.desjointdata_.Clear();
}
inline ::dtproto::dualarm::JointData* DualArmState::mutable_desjointdata(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.desJointData)
  return _impl_.desjointdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >*
DualArmState::mutable_desjointdata() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.dualarm.DualArmState.desJointData)
  return &_impl_.desjointdata_;
}
inline const ::dtproto::dualarm::JointData& DualArmState::_internal_desjointdata(int index) const {
  return _impl_.desjointdata_.Get(index);
}
inline const ::dtproto::dualarm::JointData& DualArmState::desjointdata(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.desJointData)
  return _internal_desjointdata(index);
}
inline ::dtproto::dualarm::JointData* DualArmState::_internal_add_desjointdata() {
  return _impl_.desjointdata_.Add();
}
inline ::dtproto::dualarm::JointData* DualArmState::add_desjointdata() {
  ::dtproto::dualarm::JointData* _add = _internal_add_desjointdata();
  // @@protoc_insertion_point(field_add:dtproto.dualarm.DualArmState.desJointData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >&
DualArmState::desjointdata() const {
  // @@protoc_insertion_point(field_list:dtproto.dualarm.DualArmState.desJointData)
  return _impl_.desjointdata_;
}

// repeated .dtproto.dualarm.JointState gripperState = 4;
inline int DualArmState::_internal_gripperstate_size() const {
  return _impl_.gripperstate_.size();
}
inline int DualArmState::gripperstate_size() const {
  return _internal_gripperstate_size();
}
inline void DualArmState::clear_gripperstate() {
  _impl_.gripperstate_.Clear();
}
inline ::dtproto::dualarm::JointState* DualArmState::mutable_gripperstate(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.gripperState)
  return _impl_.gripperstate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointState >*
DualArmState::mutable_gripperstate() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.dualarm.DualArmState.gripperState)
  return &_impl_.gripperstate_;
}
inline const ::dtproto::dualarm::JointState& DualArmState::_internal_gripperstate(int index) const {
  return _impl_.gripperstate_.Get(index);
}
inline const ::dtproto::dualarm::JointState& DualArmState::gripperstate(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.gripperState)
  return _internal_gripperstate(index);
}
inline ::dtproto::dualarm::JointState* DualArmState::_internal_add_gripperstate() {
  return _impl_.gripperstate_.Add();
}
inline ::dtproto::dualarm::JointState* DualArmState::add_gripperstate() {
  ::dtproto::dualarm::JointState* _add = _internal_add_gripperstate();
  // @@protoc_insertion_point(field_add:dtproto.dualarm.DualArmState.gripperState)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointState >&
DualArmState::gripperstate() const {
  // @@protoc_insertion_point(field_list:dtproto.dualarm.DualArmState.gripperState)
  return _impl_.gripperstate_;
}

// repeated .dtproto.dualarm.JointData actGripperData = 5;
inline int DualArmState::_internal_actgripperdata_size() const {
  return _impl_.actgripperdata_.size();
}
inline int DualArmState::actgripperdata_size() const {
  return _internal_actgripperdata_size();
}
inline void DualArmState::clear_actgripperdata() {
  _impl_.actgripperdata_.Clear();
}
inline ::dtproto::dualarm::JointData* DualArmState::mutable_actgripperdata(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.actGripperData)
  return _impl_.actgripperdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >*
DualArmState::mutable_actgripperdata() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.dualarm.DualArmState.actGripperData)
  return &_impl_.actgripperdata_;
}
inline const ::dtproto::dualarm::JointData& DualArmState::_internal_actgripperdata(int index) const {
  return _impl_.actgripperdata_.Get(index);
}
inline const ::dtproto::dualarm::JointData& DualArmState::actgripperdata(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.actGripperData)
  return _internal_actgripperdata(index);
}
inline ::dtproto::dualarm::JointData* DualArmState::_internal_add_actgripperdata() {
  return _impl_.actgripperdata_.Add();
}
inline ::dtproto::dualarm::JointData* DualArmState::add_actgripperdata() {
  ::dtproto::dualarm::JointData* _add = _internal_add_actgripperdata();
  // @@protoc_insertion_point(field_add:dtproto.dualarm.DualArmState.actGripperData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >&
DualArmState::actgripperdata() const {
  // @@protoc_insertion_point(field_list:dtproto.dualarm.DualArmState.actGripperData)
  return _impl_.actgripperdata_;
}

// repeated .dtproto.dualarm.JointData desGripperData = 6;
inline int DualArmState::_internal_desgripperdata_size() const {
  return _impl_.desgripperdata_.size();
}
inline int DualArmState::desgripperdata_size() const {
  return _internal_desgripperdata_size();
}
inline void DualArmState::clear_desgripperdata() {
  _impl_.desgripperdata_.Clear();
}
inline ::dtproto::dualarm::JointData* DualArmState::mutable_desgripperdata(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.desGripperData)
  return _impl_.desgripperdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >*
DualArmState::mutable_desgripperdata() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.dualarm.DualArmState.desGripperData)
  return &_impl_.desgripperdata_;
}
inline const ::dtproto::dualarm::JointData& DualArmState::_internal_desgripperdata(int index) const {
  return _impl_.desgripperdata_.Get(index);
}
inline const ::dtproto::dualarm::JointData& DualArmState::desgripperdata(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.desGripperData)
  return _internal_desgripperdata(index);
}
inline ::dtproto::dualarm::JointData* DualArmState::_internal_add_desgripperdata() {
  return _impl_.desgripperdata_.Add();
}
inline ::dtproto::dualarm::JointData* DualArmState::add_desgripperdata() {
  ::dtproto::dualarm::JointData* _add = _internal_add_desgripperdata();
  // @@protoc_insertion_point(field_add:dtproto.dualarm.DualArmState.desGripperData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::JointData >&
DualArmState::desgripperdata() const {
  // @@protoc_insertion_point(field_list:dtproto.dualarm.DualArmState.desGripperData)
  return _impl_.desgripperdata_;
}

// repeated .dtproto.dualarm.TaskState actTaskState = 7;
inline int DualArmState::_internal_acttaskstate_size() const {
  return _impl_.acttaskstate_.size();
}
inline int DualArmState::acttaskstate_size() const {
  return _internal_acttaskstate_size();
}
inline void DualArmState::clear_acttaskstate() {
  _impl_.acttaskstate_.Clear();
}
inline ::dtproto::dualarm::TaskState* DualArmState::mutable_acttaskstate(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.actTaskState)
  return _impl_.acttaskstate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::TaskState >*
DualArmState::mutable_acttaskstate() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.dualarm.DualArmState.actTaskState)
  return &_impl_.acttaskstate_;
}
inline const ::dtproto::dualarm::TaskState& DualArmState::_internal_acttaskstate(int index) const {
  return _impl_.acttaskstate_.Get(index);
}
inline const ::dtproto::dualarm::TaskState& DualArmState::acttaskstate(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.actTaskState)
  return _internal_acttaskstate(index);
}
inline ::dtproto::dualarm::TaskState* DualArmState::_internal_add_acttaskstate() {
  return _impl_.acttaskstate_.Add();
}
inline ::dtproto::dualarm::TaskState* DualArmState::add_acttaskstate() {
  ::dtproto::dualarm::TaskState* _add = _internal_add_acttaskstate();
  // @@protoc_insertion_point(field_add:dtproto.dualarm.DualArmState.actTaskState)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::TaskState >&
DualArmState::acttaskstate() const {
  // @@protoc_insertion_point(field_list:dtproto.dualarm.DualArmState.actTaskState)
  return _impl_.acttaskstate_;
}

// repeated .dtproto.dualarm.TaskState desTaskState = 8;
inline int DualArmState::_internal_destaskstate_size() const {
  return _impl_.destaskstate_.size();
}
inline int DualArmState::destaskstate_size() const {
  return _internal_destaskstate_size();
}
inline void DualArmState::clear_destaskstate() {
  _impl_.destaskstate_.Clear();
}
inline ::dtproto::dualarm::TaskState* DualArmState::mutable_destaskstate(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.desTaskState)
  return _impl_.destaskstate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::TaskState >*
DualArmState::mutable_destaskstate() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.dualarm.DualArmState.desTaskState)
  return &_impl_.destaskstate_;
}
inline const ::dtproto::dualarm::TaskState& DualArmState::_internal_destaskstate(int index) const {
  return _impl_.destaskstate_.Get(index);
}
inline const ::dtproto::dualarm::TaskState& DualArmState::destaskstate(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.desTaskState)
  return _internal_destaskstate(index);
}
inline ::dtproto::dualarm::TaskState* DualArmState::_internal_add_destaskstate() {
  return _impl_.destaskstate_.Add();
}
inline ::dtproto::dualarm::TaskState* DualArmState::add_destaskstate() {
  ::dtproto::dualarm::TaskState* _add = _internal_add_destaskstate();
  // @@protoc_insertion_point(field_add:dtproto.dualarm.DualArmState.desTaskState)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::dualarm::TaskState >&
DualArmState::destaskstate() const {
  // @@protoc_insertion_point(field_list:dtproto.dualarm.DualArmState.desTaskState)
  return _impl_.destaskstate_;
}

// .dtproto.dualarm.ControlState actControlState = 9;
inline bool DualArmState::_internal_has_actcontrolstate() const {
  return this != internal_default_instance() && _impl_.actcontrolstate_ != nullptr;
}
inline bool DualArmState::has_actcontrolstate() const {
  return _internal_has_actcontrolstate();
}
inline void DualArmState::clear_actcontrolstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.actcontrolstate_ != nullptr) {
    delete _impl_.actcontrolstate_;
  }
  _impl_.actcontrolstate_ = nullptr;
}
inline const ::dtproto::dualarm::ControlState& DualArmState::_internal_actcontrolstate() const {
  const ::dtproto::dualarm::ControlState* p = _impl_.actcontrolstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::dualarm::ControlState&>(
      ::dtproto::dualarm::_ControlState_default_instance_);
}
inline const ::dtproto::dualarm::ControlState& DualArmState::actcontrolstate() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.actControlState)
  return _internal_actcontrolstate();
}
inline void DualArmState::unsafe_arena_set_allocated_actcontrolstate(
    ::dtproto::dualarm::ControlState* actcontrolstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actcontrolstate_);
  }
  _impl_.actcontrolstate_ = actcontrolstate;
  if (actcontrolstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.DualArmState.actControlState)
}
inline ::dtproto::dualarm::ControlState* DualArmState::release_actcontrolstate() {
  
  ::dtproto::dualarm::ControlState* temp = _impl_.actcontrolstate_;
  _impl_.actcontrolstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::dualarm::ControlState* DualArmState::unsafe_arena_release_actcontrolstate() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.DualArmState.actControlState)
  
  ::dtproto::dualarm::ControlState* temp = _impl_.actcontrolstate_;
  _impl_.actcontrolstate_ = nullptr;
  return temp;
}
inline ::dtproto::dualarm::ControlState* DualArmState::_internal_mutable_actcontrolstate() {
  
  if (_impl_.actcontrolstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::dualarm::ControlState>(GetArenaForAllocation());
    _impl_.actcontrolstate_ = p;
  }
  return _impl_.actcontrolstate_;
}
inline ::dtproto::dualarm::ControlState* DualArmState::mutable_actcontrolstate() {
  ::dtproto::dualarm::ControlState* _msg = _internal_mutable_actcontrolstate();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.actControlState)
  return _msg;
}
inline void DualArmState::set_allocated_actcontrolstate(::dtproto::dualarm::ControlState* actcontrolstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.actcontrolstate_;
  }
  if (actcontrolstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actcontrolstate);
    if (message_arena != submessage_arena) {
      actcontrolstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actcontrolstate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.actcontrolstate_ = actcontrolstate;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.DualArmState.actControlState)
}

// .dtproto.dualarm.ControlState desControlState = 10;
inline bool DualArmState::_internal_has_descontrolstate() const {
  return this != internal_default_instance() && _impl_.descontrolstate_ != nullptr;
}
inline bool DualArmState::has_descontrolstate() const {
  return _internal_has_descontrolstate();
}
inline void DualArmState::clear_descontrolstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.descontrolstate_ != nullptr) {
    delete _impl_.descontrolstate_;
  }
  _impl_.descontrolstate_ = nullptr;
}
inline const ::dtproto::dualarm::ControlState& DualArmState::_internal_descontrolstate() const {
  const ::dtproto::dualarm::ControlState* p = _impl_.descontrolstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::dualarm::ControlState&>(
      ::dtproto::dualarm::_ControlState_default_instance_);
}
inline const ::dtproto::dualarm::ControlState& DualArmState::descontrolstate() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.desControlState)
  return _internal_descontrolstate();
}
inline void DualArmState::unsafe_arena_set_allocated_descontrolstate(
    ::dtproto::dualarm::ControlState* descontrolstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.descontrolstate_);
  }
  _impl_.descontrolstate_ = descontrolstate;
  if (descontrolstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.DualArmState.desControlState)
}
inline ::dtproto::dualarm::ControlState* DualArmState::release_descontrolstate() {
  
  ::dtproto::dualarm::ControlState* temp = _impl_.descontrolstate_;
  _impl_.descontrolstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::dualarm::ControlState* DualArmState::unsafe_arena_release_descontrolstate() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.DualArmState.desControlState)
  
  ::dtproto::dualarm::ControlState* temp = _impl_.descontrolstate_;
  _impl_.descontrolstate_ = nullptr;
  return temp;
}
inline ::dtproto::dualarm::ControlState* DualArmState::_internal_mutable_descontrolstate() {
  
  if (_impl_.descontrolstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::dualarm::ControlState>(GetArenaForAllocation());
    _impl_.descontrolstate_ = p;
  }
  return _impl_.descontrolstate_;
}
inline ::dtproto::dualarm::ControlState* DualArmState::mutable_descontrolstate() {
  ::dtproto::dualarm::ControlState* _msg = _internal_mutable_descontrolstate();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.desControlState)
  return _msg;
}
inline void DualArmState::set_allocated_descontrolstate(::dtproto::dualarm::ControlState* descontrolstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.descontrolstate_;
  }
  if (descontrolstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(descontrolstate);
    if (message_arena != submessage_arena) {
      descontrolstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, descontrolstate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.descontrolstate_ = descontrolstate;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.DualArmState.desControlState)
}

// .dtproto.dualarm.ThreadState threadState = 11;
inline bool DualArmState::_internal_has_threadstate() const {
  return this != internal_default_instance() && _impl_.threadstate_ != nullptr;
}
inline bool DualArmState::has_threadstate() const {
  return _internal_has_threadstate();
}
inline void DualArmState::clear_threadstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.threadstate_ != nullptr) {
    delete _impl_.threadstate_;
  }
  _impl_.threadstate_ = nullptr;
}
inline const ::dtproto::dualarm::ThreadState& DualArmState::_internal_threadstate() const {
  const ::dtproto::dualarm::ThreadState* p = _impl_.threadstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::dualarm::ThreadState&>(
      ::dtproto::dualarm::_ThreadState_default_instance_);
}
inline const ::dtproto::dualarm::ThreadState& DualArmState::threadstate() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.threadState)
  return _internal_threadstate();
}
inline void DualArmState::unsafe_arena_set_allocated_threadstate(
    ::dtproto::dualarm::ThreadState* threadstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.threadstate_);
  }
  _impl_.threadstate_ = threadstate;
  if (threadstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.DualArmState.threadState)
}
inline ::dtproto::dualarm::ThreadState* DualArmState::release_threadstate() {
  
  ::dtproto::dualarm::ThreadState* temp = _impl_.threadstate_;
  _impl_.threadstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::dualarm::ThreadState* DualArmState::unsafe_arena_release_threadstate() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.DualArmState.threadState)
  
  ::dtproto::dualarm::ThreadState* temp = _impl_.threadstate_;
  _impl_.threadstate_ = nullptr;
  return temp;
}
inline ::dtproto::dualarm::ThreadState* DualArmState::_internal_mutable_threadstate() {
  
  if (_impl_.threadstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::dualarm::ThreadState>(GetArenaForAllocation());
    _impl_.threadstate_ = p;
  }
  return _impl_.threadstate_;
}
inline ::dtproto::dualarm::ThreadState* DualArmState::mutable_threadstate() {
  ::dtproto::dualarm::ThreadState* _msg = _internal_mutable_threadstate();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.threadState)
  return _msg;
}
inline void DualArmState::set_allocated_threadstate(::dtproto::dualarm::ThreadState* threadstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.threadstate_;
  }
  if (threadstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(threadstate);
    if (message_arena != submessage_arena) {
      threadstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threadstate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.threadstate_ = threadstate;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.DualArmState.threadState)
}

// .dtproto.std_msgs.PackedDouble arbitraryState = 20;
inline bool DualArmState::_internal_has_arbitrarystate() const {
  return this != internal_default_instance() && _impl_.arbitrarystate_ != nullptr;
}
inline bool DualArmState::has_arbitrarystate() const {
  return _internal_has_arbitrarystate();
}
inline const ::dtproto::std_msgs::PackedDouble& DualArmState::_internal_arbitrarystate() const {
  const ::dtproto::std_msgs::PackedDouble* p = _impl_.arbitrarystate_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::std_msgs::PackedDouble&>(
      ::dtproto::std_msgs::_PackedDouble_default_instance_);
}
inline const ::dtproto::std_msgs::PackedDouble& DualArmState::arbitrarystate() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.arbitraryState)
  return _internal_arbitrarystate();
}
inline void DualArmState::unsafe_arena_set_allocated_arbitrarystate(
    ::dtproto::std_msgs::PackedDouble* arbitrarystate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arbitrarystate_);
  }
  _impl_.arbitrarystate_ = arbitrarystate;
  if (arbitrarystate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.DualArmState.arbitraryState)
}
inline ::dtproto::std_msgs::PackedDouble* DualArmState::release_arbitrarystate() {
  
  ::dtproto::std_msgs::PackedDouble* temp = _impl_.arbitrarystate_;
  _impl_.arbitrarystate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::std_msgs::PackedDouble* DualArmState::unsafe_arena_release_arbitrarystate() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.DualArmState.arbitraryState)
  
  ::dtproto::std_msgs::PackedDouble* temp = _impl_.arbitrarystate_;
  _impl_.arbitrarystate_ = nullptr;
  return temp;
}
inline ::dtproto::std_msgs::PackedDouble* DualArmState::_internal_mutable_arbitrarystate() {
  
  if (_impl_.arbitrarystate_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::std_msgs::PackedDouble>(GetArenaForAllocation());
    _impl_.arbitrarystate_ = p;
  }
  return _impl_.arbitrarystate_;
}
inline ::dtproto::std_msgs::PackedDouble* DualArmState::mutable_arbitrarystate() {
  ::dtproto::std_msgs::PackedDouble* _msg = _internal_mutable_arbitrarystate();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.arbitraryState)
  return _msg;
}
inline void DualArmState::set_allocated_arbitrarystate(::dtproto::std_msgs::PackedDouble* arbitrarystate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arbitrarystate_);
  }
  if (arbitrarystate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arbitrarystate));
    if (message_arena != submessage_arena) {
      arbitrarystate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arbitrarystate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arbitrarystate_ = arbitrarystate;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.DualArmState.arbitraryState)
}

// .dtproto.std_msgs.PackedDouble arbitraryStateXY = 21;
inline bool DualArmState::_internal_has_arbitrarystatexy() const {
  return this != internal_default_instance() && _impl_.arbitrarystatexy_ != nullptr;
}
inline bool DualArmState::has_arbitrarystatexy() const {
  return _internal_has_arbitrarystatexy();
}
inline const ::dtproto::std_msgs::PackedDouble& DualArmState::_internal_arbitrarystatexy() const {
  const ::dtproto::std_msgs::PackedDouble* p = _impl_.arbitrarystatexy_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::std_msgs::PackedDouble&>(
      ::dtproto::std_msgs::_PackedDouble_default_instance_);
}
inline const ::dtproto::std_msgs::PackedDouble& DualArmState::arbitrarystatexy() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmState.arbitraryStateXY)
  return _internal_arbitrarystatexy();
}
inline void DualArmState::unsafe_arena_set_allocated_arbitrarystatexy(
    ::dtproto::std_msgs::PackedDouble* arbitrarystatexy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arbitrarystatexy_);
  }
  _impl_.arbitrarystatexy_ = arbitrarystatexy;
  if (arbitrarystatexy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.DualArmState.arbitraryStateXY)
}
inline ::dtproto::std_msgs::PackedDouble* DualArmState::release_arbitrarystatexy() {
  
  ::dtproto::std_msgs::PackedDouble* temp = _impl_.arbitrarystatexy_;
  _impl_.arbitrarystatexy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::std_msgs::PackedDouble* DualArmState::unsafe_arena_release_arbitrarystatexy() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.DualArmState.arbitraryStateXY)
  
  ::dtproto::std_msgs::PackedDouble* temp = _impl_.arbitrarystatexy_;
  _impl_.arbitrarystatexy_ = nullptr;
  return temp;
}
inline ::dtproto::std_msgs::PackedDouble* DualArmState::_internal_mutable_arbitrarystatexy() {
  
  if (_impl_.arbitrarystatexy_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::std_msgs::PackedDouble>(GetArenaForAllocation());
    _impl_.arbitrarystatexy_ = p;
  }
  return _impl_.arbitrarystatexy_;
}
inline ::dtproto::std_msgs::PackedDouble* DualArmState::mutable_arbitrarystatexy() {
  ::dtproto::std_msgs::PackedDouble* _msg = _internal_mutable_arbitrarystatexy();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmState.arbitraryStateXY)
  return _msg;
}
inline void DualArmState::set_allocated_arbitrarystatexy(::dtproto::std_msgs::PackedDouble* arbitrarystatexy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arbitrarystatexy_);
  }
  if (arbitrarystatexy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arbitrarystatexy));
    if (message_arena != submessage_arena) {
      arbitrarystatexy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arbitrarystatexy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arbitrarystatexy_ = arbitrarystatexy;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.DualArmState.arbitraryStateXY)
}

// -------------------------------------------------------------------

// DualArmStateTimeStamped

// .dtproto.std_msgs.Header header = 1;
inline bool DualArmStateTimeStamped::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool DualArmStateTimeStamped::has_header() const {
  return _internal_has_header();
}
inline const ::dtproto::std_msgs::Header& DualArmStateTimeStamped::_internal_header() const {
  const ::dtproto::std_msgs::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::std_msgs::Header&>(
      ::dtproto::std_msgs::_Header_default_instance_);
}
inline const ::dtproto::std_msgs::Header& DualArmStateTimeStamped::header() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmStateTimeStamped.header)
  return _internal_header();
}
inline void DualArmStateTimeStamped::unsafe_arena_set_allocated_header(
    ::dtproto::std_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.DualArmStateTimeStamped.header)
}
inline ::dtproto::std_msgs::Header* DualArmStateTimeStamped::release_header() {
  
  ::dtproto::std_msgs::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::std_msgs::Header* DualArmStateTimeStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.DualArmStateTimeStamped.header)
  
  ::dtproto::std_msgs::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::dtproto::std_msgs::Header* DualArmStateTimeStamped::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::std_msgs::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::dtproto::std_msgs::Header* DualArmStateTimeStamped::mutable_header() {
  ::dtproto::std_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmStateTimeStamped.header)
  return _msg;
}
inline void DualArmStateTimeStamped::set_allocated_header(::dtproto::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.DualArmStateTimeStamped.header)
}

// .dtproto.dualarm.DualArmState state = 2;
inline bool DualArmStateTimeStamped::_internal_has_state() const {
  return this != internal_default_instance() && _impl_.state_ != nullptr;
}
inline bool DualArmStateTimeStamped::has_state() const {
  return _internal_has_state();
}
inline void DualArmStateTimeStamped::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
inline const ::dtproto::dualarm::DualArmState& DualArmStateTimeStamped::_internal_state() const {
  const ::dtproto::dualarm::DualArmState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::dualarm::DualArmState&>(
      ::dtproto::dualarm::_DualArmState_default_instance_);
}
inline const ::dtproto::dualarm::DualArmState& DualArmStateTimeStamped::state() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.DualArmStateTimeStamped.state)
  return _internal_state();
}
inline void DualArmStateTimeStamped::unsafe_arena_set_allocated_state(
    ::dtproto::dualarm::DualArmState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.DualArmStateTimeStamped.state)
}
inline ::dtproto::dualarm::DualArmState* DualArmStateTimeStamped::release_state() {
  
  ::dtproto::dualarm::DualArmState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::dualarm::DualArmState* DualArmStateTimeStamped::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.DualArmStateTimeStamped.state)
  
  ::dtproto::dualarm::DualArmState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::dtproto::dualarm::DualArmState* DualArmStateTimeStamped::_internal_mutable_state() {
  
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::dualarm::DualArmState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::dtproto::dualarm::DualArmState* DualArmStateTimeStamped::mutable_state() {
  ::dtproto::dualarm::DualArmState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.DualArmStateTimeStamped.state)
  return _msg;
}
inline void DualArmStateTimeStamped::set_allocated_state(::dtproto::dualarm::DualArmState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.DualArmStateTimeStamped.state)
}

// -------------------------------------------------------------------

// OperationState

// int32 op_mode = 1;
inline void OperationState::clear_op_mode() {
  _impl_.op_mode_ = 0;
}
inline int32_t OperationState::_internal_op_mode() const {
  return _impl_.op_mode_;
}
inline int32_t OperationState::op_mode() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.OperationState.op_mode)
  return _internal_op_mode();
}
inline void OperationState::_internal_set_op_mode(int32_t value) {
  
  _impl_.op_mode_ = value;
}
inline void OperationState::set_op_mode(int32_t value) {
  _internal_set_op_mode(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.OperationState.op_mode)
}

// int32 op_status = 2;
inline void OperationState::clear_op_status() {
  _impl_.op_status_ = 0;
}
inline int32_t OperationState::_internal_op_status() const {
  return _impl_.op_status_;
}
inline int32_t OperationState::op_status() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.OperationState.op_status)
  return _internal_op_status();
}
inline void OperationState::_internal_set_op_status(int32_t value) {
  
  _impl_.op_status_ = value;
}
inline void OperationState::set_op_status(int32_t value) {
  _internal_set_op_status(value);
  // @@protoc_insertion_point(field_set:dtproto.dualarm.OperationState.op_status)
}

// -------------------------------------------------------------------

// OperationStateTimeStamped

// .dtproto.std_msgs.Header header = 1;
inline bool OperationStateTimeStamped::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool OperationStateTimeStamped::has_header() const {
  return _internal_has_header();
}
inline const ::dtproto::std_msgs::Header& OperationStateTimeStamped::_internal_header() const {
  const ::dtproto::std_msgs::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::std_msgs::Header&>(
      ::dtproto::std_msgs::_Header_default_instance_);
}
inline const ::dtproto::std_msgs::Header& OperationStateTimeStamped::header() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.OperationStateTimeStamped.header)
  return _internal_header();
}
inline void OperationStateTimeStamped::unsafe_arena_set_allocated_header(
    ::dtproto::std_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.OperationStateTimeStamped.header)
}
inline ::dtproto::std_msgs::Header* OperationStateTimeStamped::release_header() {
  
  ::dtproto::std_msgs::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::std_msgs::Header* OperationStateTimeStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.OperationStateTimeStamped.header)
  
  ::dtproto::std_msgs::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::dtproto::std_msgs::Header* OperationStateTimeStamped::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::std_msgs::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::dtproto::std_msgs::Header* OperationStateTimeStamped::mutable_header() {
  ::dtproto::std_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.OperationStateTimeStamped.header)
  return _msg;
}
inline void OperationStateTimeStamped::set_allocated_header(::dtproto::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.OperationStateTimeStamped.header)
}

// .dtproto.dualarm.OperationState state = 2;
inline bool OperationStateTimeStamped::_internal_has_state() const {
  return this != internal_default_instance() && _impl_.state_ != nullptr;
}
inline bool OperationStateTimeStamped::has_state() const {
  return _internal_has_state();
}
inline void OperationStateTimeStamped::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
inline const ::dtproto::dualarm::OperationState& OperationStateTimeStamped::_internal_state() const {
  const ::dtproto::dualarm::OperationState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::dualarm::OperationState&>(
      ::dtproto::dualarm::_OperationState_default_instance_);
}
inline const ::dtproto::dualarm::OperationState& OperationStateTimeStamped::state() const {
  // @@protoc_insertion_point(field_get:dtproto.dualarm.OperationStateTimeStamped.state)
  return _internal_state();
}
inline void OperationStateTimeStamped::unsafe_arena_set_allocated_state(
    ::dtproto::dualarm::OperationState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.dualarm.OperationStateTimeStamped.state)
}
inline ::dtproto::dualarm::OperationState* OperationStateTimeStamped::release_state() {
  
  ::dtproto::dualarm::OperationState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::dualarm::OperationState* OperationStateTimeStamped::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:dtproto.dualarm.OperationStateTimeStamped.state)
  
  ::dtproto::dualarm::OperationState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::dtproto::dualarm::OperationState* OperationStateTimeStamped::_internal_mutable_state() {
  
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::dualarm::OperationState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::dtproto::dualarm::OperationState* OperationStateTimeStamped::mutable_state() {
  ::dtproto::dualarm::OperationState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:dtproto.dualarm.OperationStateTimeStamped.state)
  return _msg;
}
inline void OperationStateTimeStamped::set_allocated_state(::dtproto::dualarm::OperationState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:dtproto.dualarm.OperationStateTimeStamped.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dualarm
}  // namespace dtproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DualArm_2eproto
