// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DualArm.proto

#include "DualArm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dtproto {
namespace dualarm {
PROTOBUF_CONSTEXPR ThreadState::ThreadState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ctrlperiod_ms_)*/0
  , /*decltype(_impl_.ctrlload_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ThreadStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThreadStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThreadStateDefaultTypeInternal() {}
  union {
    ThreadState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThreadStateDefaultTypeInternal _ThreadState_default_instance_;
PROTOBUF_CONSTEXPR TaskState::TaskState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.rot_)*/nullptr
  , /*decltype(_impl_.linvel_)*/nullptr
  , /*decltype(_impl_.angvel_)*/nullptr
  , /*decltype(_impl_.force_)*/nullptr
  , /*decltype(_impl_.moment_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskStateDefaultTypeInternal() {}
  union {
    TaskState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskStateDefaultTypeInternal _TaskState_default_instance_;
PROTOBUF_CONSTEXPR JointState::JointState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statusword_)*/0u
  , /*decltype(_impl_.controlword_)*/0u
  , /*decltype(_impl_.incposofs_cnt_)*/0
  , /*decltype(_impl_.absposofs_cnt_)*/0
  , /*decltype(_impl_.incpos_cnt_)*/0
  , /*decltype(_impl_.abspos_cnt_)*/0
  , /*decltype(_impl_.incvel_cps_)*/0
  , /*decltype(_impl_.mcutemp_c_)*/0
  , /*decltype(_impl_.invtemp_c_)*/0
  , /*decltype(_impl_.inputvolt_v_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JointStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointStateDefaultTypeInternal() {}
  union {
    JointState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointStateDefaultTypeInternal _JointState_default_instance_;
PROTOBUF_CONSTEXPR JointData::JointData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_rad_)*/0
  , /*decltype(_impl_.posaux_rad_)*/0
  , /*decltype(_impl_.vel_rps_)*/0
  , /*decltype(_impl_.acc_rpss_)*/0
  , /*decltype(_impl_.torq_nm_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JointDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointDataDefaultTypeInternal() {}
  union {
    JointData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointDataDefaultTypeInternal _JointData_default_instance_;
PROTOBUF_CONSTEXPR ControlState::ControlState(
    ::_pbi::ConstantInitialized) {}
struct ControlStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlStateDefaultTypeInternal() {}
  union {
    ControlState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlStateDefaultTypeInternal _ControlState_default_instance_;
PROTOBUF_CONSTEXPR DualArmState::DualArmState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.jointstate_)*/{}
  , /*decltype(_impl_.actjointdata_)*/{}
  , /*decltype(_impl_.desjointdata_)*/{}
  , /*decltype(_impl_.gripperstate_)*/{}
  , /*decltype(_impl_.actgripperdata_)*/{}
  , /*decltype(_impl_.desgripperdata_)*/{}
  , /*decltype(_impl_.acttaskstate_)*/{}
  , /*decltype(_impl_.destaskstate_)*/{}
  , /*decltype(_impl_.actcontrolstate_)*/nullptr
  , /*decltype(_impl_.descontrolstate_)*/nullptr
  , /*decltype(_impl_.threadstate_)*/nullptr
  , /*decltype(_impl_.arbitrarystate_)*/nullptr
  , /*decltype(_impl_.arbitrarystatexy_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DualArmStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DualArmStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DualArmStateDefaultTypeInternal() {}
  union {
    DualArmState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DualArmStateDefaultTypeInternal _DualArmState_default_instance_;
PROTOBUF_CONSTEXPR DualArmStateTimeStamped::DualArmStateTimeStamped(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DualArmStateTimeStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DualArmStateTimeStampedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DualArmStateTimeStampedDefaultTypeInternal() {}
  union {
    DualArmStateTimeStamped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DualArmStateTimeStampedDefaultTypeInternal _DualArmStateTimeStamped_default_instance_;
PROTOBUF_CONSTEXPR OperationState::OperationState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.op_mode_)*/0
  , /*decltype(_impl_.op_status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationStateDefaultTypeInternal() {}
  union {
    OperationState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationStateDefaultTypeInternal _OperationState_default_instance_;
PROTOBUF_CONSTEXPR OperationStateTimeStamped::OperationStateTimeStamped(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationStateTimeStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationStateTimeStampedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationStateTimeStampedDefaultTypeInternal() {}
  union {
    OperationStateTimeStamped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationStateTimeStampedDefaultTypeInternal _OperationStateTimeStamped_default_instance_;
}  // namespace dualarm
}  // namespace dtproto
static ::_pb::Metadata file_level_metadata_DualArm_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_DualArm_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_DualArm_2eproto = nullptr;

const uint32_t TableStruct_DualArm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::ThreadState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::ThreadState, _impl_.ctrlperiod_ms_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::ThreadState, _impl_.ctrlload_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::TaskState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::TaskState, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::TaskState, _impl_.rot_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::TaskState, _impl_.linvel_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::TaskState, _impl_.angvel_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::TaskState, _impl_.force_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::TaskState, _impl_.moment_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::TaskState, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointState, _impl_.statusword_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointState, _impl_.controlword_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointState, _impl_.incposofs_cnt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointState, _impl_.absposofs_cnt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointState, _impl_.incpos_cnt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointState, _impl_.abspos_cnt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointState, _impl_.incvel_cps_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointState, _impl_.mcutemp_c_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointState, _impl_.invtemp_c_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointState, _impl_.inputvolt_v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointData, _impl_.pos_rad_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointData, _impl_.posaux_rad_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointData, _impl_.vel_rps_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointData, _impl_.acc_rpss_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::JointData, _impl_.torq_nm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::ControlState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.jointstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.actjointdata_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.desjointdata_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.gripperstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.actgripperdata_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.desgripperdata_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.acttaskstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.destaskstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.actcontrolstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.descontrolstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.threadstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.arbitrarystate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmState, _impl_.arbitrarystatexy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmStateTimeStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmStateTimeStamped, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::DualArmStateTimeStamped, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::OperationState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::OperationState, _impl_.op_mode_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::OperationState, _impl_.op_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::OperationStateTimeStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::OperationStateTimeStamped, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::dtproto::dualarm::OperationStateTimeStamped, _impl_.state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dtproto::dualarm::ThreadState)},
  { 8, -1, -1, sizeof(::dtproto::dualarm::TaskState)},
  { 21, -1, -1, sizeof(::dtproto::dualarm::JointState)},
  { 37, -1, -1, sizeof(::dtproto::dualarm::JointData)},
  { 48, -1, -1, sizeof(::dtproto::dualarm::ControlState)},
  { 54, -1, -1, sizeof(::dtproto::dualarm::DualArmState)},
  { 73, -1, -1, sizeof(::dtproto::dualarm::DualArmStateTimeStamped)},
  { 81, -1, -1, sizeof(::dtproto::dualarm::OperationState)},
  { 89, -1, -1, sizeof(::dtproto::dualarm::OperationStateTimeStamped)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dtproto::dualarm::_ThreadState_default_instance_._instance,
  &::dtproto::dualarm::_TaskState_default_instance_._instance,
  &::dtproto::dualarm::_JointState_default_instance_._instance,
  &::dtproto::dualarm::_JointData_default_instance_._instance,
  &::dtproto::dualarm::_ControlState_default_instance_._instance,
  &::dtproto::dualarm::_DualArmState_default_instance_._instance,
  &::dtproto::dualarm::_DualArmStateTimeStamped_default_instance_._instance,
  &::dtproto::dualarm::_OperationState_default_instance_._instance,
  &::dtproto::dualarm::_OperationStateTimeStamped_default_instance_._instance,
};

const char descriptor_table_protodef_DualArm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rDualArm.proto\022\017dtproto.dualarm\032\035dtProt"
  "o/std_msgs/Header.proto\032\"dtProto/std_msg"
  "s/PackedArray.proto\032\036dtProto/std_msgs/Re"
  "quest.proto\032!dtProto/geometry_msgs/Point"
  ".proto\"9\n\013ThreadState\022\025\n\rctrlPeriod_ms\030\001"
  " \001(\001\022\023\n\013ctrlLoad_ms\030\002 \001(\001\"\260\002\n\tTaskState\022"
  "+\n\003pos\030\001 \001(\0132\036.dtproto.geometry_msgs.Poi"
  "nt3d\022+\n\003rot\030\002 \001(\0132\036.dtproto.geometry_msg"
  "s.Point3d\022.\n\006linVel\030\003 \001(\0132\036.dtproto.geom"
  "etry_msgs.Point3d\022.\n\006angVel\030\004 \001(\0132\036.dtpr"
  "oto.geometry_msgs.Point3d\022-\n\005force\030\005 \001(\013"
  "2\036.dtproto.geometry_msgs.Point3d\022.\n\006mome"
  "nt\030\006 \001(\0132\036.dtproto.geometry_msgs.Point3d"
  "\022\n\n\002id\030\007 \001(\r\"\332\001\n\nJointState\022\022\n\nstatusWor"
  "d\030\001 \001(\r\022\023\n\013controlWord\030\002 \001(\r\022\025\n\rincPosOf"
  "s_cnt\030\003 \001(\005\022\025\n\rabsPosOfs_cnt\030\004 \001(\005\022\022\n\nin"
  "cPos_cnt\030\005 \001(\005\022\022\n\nabsPos_cnt\030\006 \001(\005\022\022\n\nin"
  "cVel_cps\030\007 \001(\005\022\021\n\tmcuTemp_C\030\010 \001(\002\022\021\n\tinv"
  "Temp_C\030\t \001(\002\022\023\n\013inputVolt_V\030\n \001(\002\"d\n\tJoi"
  "ntData\022\017\n\007pos_rad\030\001 \001(\001\022\022\n\nposAux_rad\030\002 "
  "\001(\001\022\017\n\007vel_rps\030\003 \001(\001\022\020\n\010acc_rpss\030\004 \001(\001\022\017"
  "\n\007torq_Nm\030\005 \001(\001\"\016\n\014ControlState\"\267\005\n\014Dual"
  "ArmState\022/\n\njointState\030\001 \003(\0132\033.dtproto.d"
  "ualarm.JointState\0220\n\014actJointData\030\002 \003(\0132"
  "\032.dtproto.dualarm.JointData\0220\n\014desJointD"
  "ata\030\003 \003(\0132\032.dtproto.dualarm.JointData\0221\n"
  "\014gripperState\030\004 \003(\0132\033.dtproto.dualarm.Jo"
  "intState\0222\n\016actGripperData\030\005 \003(\0132\032.dtpro"
  "to.dualarm.JointData\0222\n\016desGripperData\030\006"
  " \003(\0132\032.dtproto.dualarm.JointData\0220\n\014actT"
  "askState\030\007 \003(\0132\032.dtproto.dualarm.TaskSta"
  "te\0220\n\014desTaskState\030\010 \003(\0132\032.dtproto.duala"
  "rm.TaskState\0226\n\017actControlState\030\t \001(\0132\035."
  "dtproto.dualarm.ControlState\0226\n\017desContr"
  "olState\030\n \001(\0132\035.dtproto.dualarm.ControlS"
  "tate\0221\n\013threadState\030\013 \001(\0132\034.dtproto.dual"
  "arm.ThreadState\0226\n\016arbitraryState\030\024 \001(\0132"
  "\036.dtproto.std_msgs.PackedDouble\0228\n\020arbit"
  "raryStateXY\030\025 \001(\0132\036.dtproto.std_msgs.Pac"
  "kedDouble\"q\n\027DualArmStateTimeStamped\022(\n\006"
  "header\030\001 \001(\0132\030.dtproto.std_msgs.Header\022,"
  "\n\005state\030\002 \001(\0132\035.dtproto.dualarm.DualArmS"
  "tate\"4\n\016OperationState\022\017\n\007op_mode\030\001 \001(\005\022"
  "\021\n\top_status\030\002 \001(\005\"u\n\031OperationStateTime"
  "Stamped\022(\n\006header\030\001 \001(\0132\030.dtproto.std_ms"
  "gs.Header\022.\n\005state\030\002 \001(\0132\037.dtproto.duala"
  "rm.OperationStateb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_DualArm_2eproto_deps[4] = {
  &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fPoint_2eproto,
  &::descriptor_table_dtProto_2fstd_5fmsgs_2fHeader_2eproto,
  &::descriptor_table_dtProto_2fstd_5fmsgs_2fPackedArray_2eproto,
  &::descriptor_table_dtProto_2fstd_5fmsgs_2fRequest_2eproto,
};
static ::_pbi::once_flag descriptor_table_DualArm_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_DualArm_2eproto = {
    false, false, 1865, descriptor_table_protodef_DualArm_2eproto,
    "DualArm.proto",
    &descriptor_table_DualArm_2eproto_once, descriptor_table_DualArm_2eproto_deps, 4, 9,
    schemas, file_default_instances, TableStruct_DualArm_2eproto::offsets,
    file_level_metadata_DualArm_2eproto, file_level_enum_descriptors_DualArm_2eproto,
    file_level_service_descriptors_DualArm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_DualArm_2eproto_getter() {
  return &descriptor_table_DualArm_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_DualArm_2eproto(&descriptor_table_DualArm_2eproto);
namespace dtproto {
namespace dualarm {

// ===================================================================

class ThreadState::_Internal {
 public:
};

ThreadState::ThreadState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.dualarm.ThreadState)
}
ThreadState::ThreadState(const ThreadState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThreadState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ctrlperiod_ms_){}
    , decltype(_impl_.ctrlload_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ctrlperiod_ms_, &from._impl_.ctrlperiod_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ctrlload_ms_) -
    reinterpret_cast<char*>(&_impl_.ctrlperiod_ms_)) + sizeof(_impl_.ctrlload_ms_));
  // @@protoc_insertion_point(copy_constructor:dtproto.dualarm.ThreadState)
}

inline void ThreadState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ctrlperiod_ms_){0}
    , decltype(_impl_.ctrlload_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ThreadState::~ThreadState() {
  // @@protoc_insertion_point(destructor:dtproto.dualarm.ThreadState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThreadState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ThreadState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThreadState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.dualarm.ThreadState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ctrlperiod_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ctrlload_ms_) -
      reinterpret_cast<char*>(&_impl_.ctrlperiod_ms_)) + sizeof(_impl_.ctrlload_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThreadState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double ctrlPeriod_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.ctrlperiod_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ctrlLoad_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.ctrlload_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThreadState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.dualarm.ThreadState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double ctrlPeriod_ms = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ctrlperiod_ms = this->_internal_ctrlperiod_ms();
  uint64_t raw_ctrlperiod_ms;
  memcpy(&raw_ctrlperiod_ms, &tmp_ctrlperiod_ms, sizeof(tmp_ctrlperiod_ms));
  if (raw_ctrlperiod_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_ctrlperiod_ms(), target);
  }

  // double ctrlLoad_ms = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ctrlload_ms = this->_internal_ctrlload_ms();
  uint64_t raw_ctrlload_ms;
  memcpy(&raw_ctrlload_ms, &tmp_ctrlload_ms, sizeof(tmp_ctrlload_ms));
  if (raw_ctrlload_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_ctrlload_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.dualarm.ThreadState)
  return target;
}

size_t ThreadState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.dualarm.ThreadState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ctrlPeriod_ms = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ctrlperiod_ms = this->_internal_ctrlperiod_ms();
  uint64_t raw_ctrlperiod_ms;
  memcpy(&raw_ctrlperiod_ms, &tmp_ctrlperiod_ms, sizeof(tmp_ctrlperiod_ms));
  if (raw_ctrlperiod_ms != 0) {
    total_size += 1 + 8;
  }

  // double ctrlLoad_ms = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ctrlload_ms = this->_internal_ctrlload_ms();
  uint64_t raw_ctrlload_ms;
  memcpy(&raw_ctrlload_ms, &tmp_ctrlload_ms, sizeof(tmp_ctrlload_ms));
  if (raw_ctrlload_ms != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThreadState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThreadState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThreadState::GetClassData() const { return &_class_data_; }


void ThreadState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThreadState*>(&to_msg);
  auto& from = static_cast<const ThreadState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.dualarm.ThreadState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ctrlperiod_ms = from._internal_ctrlperiod_ms();
  uint64_t raw_ctrlperiod_ms;
  memcpy(&raw_ctrlperiod_ms, &tmp_ctrlperiod_ms, sizeof(tmp_ctrlperiod_ms));
  if (raw_ctrlperiod_ms != 0) {
    _this->_internal_set_ctrlperiod_ms(from._internal_ctrlperiod_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ctrlload_ms = from._internal_ctrlload_ms();
  uint64_t raw_ctrlload_ms;
  memcpy(&raw_ctrlload_ms, &tmp_ctrlload_ms, sizeof(tmp_ctrlload_ms));
  if (raw_ctrlload_ms != 0) {
    _this->_internal_set_ctrlload_ms(from._internal_ctrlload_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThreadState::CopyFrom(const ThreadState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.dualarm.ThreadState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadState::IsInitialized() const {
  return true;
}

void ThreadState::InternalSwap(ThreadState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThreadState, _impl_.ctrlload_ms_)
      + sizeof(ThreadState::_impl_.ctrlload_ms_)
      - PROTOBUF_FIELD_OFFSET(ThreadState, _impl_.ctrlperiod_ms_)>(
          reinterpret_cast<char*>(&_impl_.ctrlperiod_ms_),
          reinterpret_cast<char*>(&other->_impl_.ctrlperiod_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThreadState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DualArm_2eproto_getter, &descriptor_table_DualArm_2eproto_once,
      file_level_metadata_DualArm_2eproto[0]);
}

// ===================================================================

class TaskState::_Internal {
 public:
  static const ::dtproto::geometry_msgs::Point3d& pos(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& rot(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& linvel(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& angvel(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& force(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& moment(const TaskState* msg);
};

const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::pos(const TaskState* msg) {
  return *msg->_impl_.pos_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::rot(const TaskState* msg) {
  return *msg->_impl_.rot_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::linvel(const TaskState* msg) {
  return *msg->_impl_.linvel_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::angvel(const TaskState* msg) {
  return *msg->_impl_.angvel_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::force(const TaskState* msg) {
  return *msg->_impl_.force_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::moment(const TaskState* msg) {
  return *msg->_impl_.moment_;
}
void TaskState::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
void TaskState::clear_rot() {
  if (GetArenaForAllocation() == nullptr && _impl_.rot_ != nullptr) {
    delete _impl_.rot_;
  }
  _impl_.rot_ = nullptr;
}
void TaskState::clear_linvel() {
  if (GetArenaForAllocation() == nullptr && _impl_.linvel_ != nullptr) {
    delete _impl_.linvel_;
  }
  _impl_.linvel_ = nullptr;
}
void TaskState::clear_angvel() {
  if (GetArenaForAllocation() == nullptr && _impl_.angvel_ != nullptr) {
    delete _impl_.angvel_;
  }
  _impl_.angvel_ = nullptr;
}
void TaskState::clear_force() {
  if (GetArenaForAllocation() == nullptr && _impl_.force_ != nullptr) {
    delete _impl_.force_;
  }
  _impl_.force_ = nullptr;
}
void TaskState::clear_moment() {
  if (GetArenaForAllocation() == nullptr && _impl_.moment_ != nullptr) {
    delete _impl_.moment_;
  }
  _impl_.moment_ = nullptr;
}
TaskState::TaskState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.dualarm.TaskState)
}
TaskState::TaskState(const TaskState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.rot_){nullptr}
    , decltype(_impl_.linvel_){nullptr}
    , decltype(_impl_.angvel_){nullptr}
    , decltype(_impl_.force_){nullptr}
    , decltype(_impl_.moment_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.pos_);
  }
  if (from._internal_has_rot()) {
    _this->_impl_.rot_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.rot_);
  }
  if (from._internal_has_linvel()) {
    _this->_impl_.linvel_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.linvel_);
  }
  if (from._internal_has_angvel()) {
    _this->_impl_.angvel_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.angvel_);
  }
  if (from._internal_has_force()) {
    _this->_impl_.force_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.force_);
  }
  if (from._internal_has_moment()) {
    _this->_impl_.moment_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.moment_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:dtproto.dualarm.TaskState)
}

inline void TaskState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.rot_){nullptr}
    , decltype(_impl_.linvel_){nullptr}
    , decltype(_impl_.angvel_){nullptr}
    , decltype(_impl_.force_){nullptr}
    , decltype(_impl_.moment_){nullptr}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskState::~TaskState() {
  // @@protoc_insertion_point(destructor:dtproto.dualarm.TaskState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.rot_;
  if (this != internal_default_instance()) delete _impl_.linvel_;
  if (this != internal_default_instance()) delete _impl_.angvel_;
  if (this != internal_default_instance()) delete _impl_.force_;
  if (this != internal_default_instance()) delete _impl_.moment_;
}

void TaskState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.dualarm.TaskState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rot_ != nullptr) {
    delete _impl_.rot_;
  }
  _impl_.rot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.linvel_ != nullptr) {
    delete _impl_.linvel_;
  }
  _impl_.linvel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angvel_ != nullptr) {
    delete _impl_.angvel_;
  }
  _impl_.angvel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.force_ != nullptr) {
    delete _impl_.force_;
  }
  _impl_.force_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.moment_ != nullptr) {
    delete _impl_.moment_;
  }
  _impl_.moment_ = nullptr;
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.geometry_msgs.Point3d pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d rot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d linVel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linvel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d angVel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_angvel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d force = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_force(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d moment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_moment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.dualarm.TaskState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.geometry_msgs.Point3d pos = 1;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d rot = 2;
  if (this->_internal_has_rot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rot(this),
        _Internal::rot(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d linVel = 3;
  if (this->_internal_has_linvel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::linvel(this),
        _Internal::linvel(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d angVel = 4;
  if (this->_internal_has_angvel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::angvel(this),
        _Internal::angvel(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d force = 5;
  if (this->_internal_has_force()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::force(this),
        _Internal::force(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d moment = 6;
  if (this->_internal_has_moment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::moment(this),
        _Internal::moment(this).GetCachedSize(), target, stream);
  }

  // uint32 id = 7;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.dualarm.TaskState)
  return target;
}

size_t TaskState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.dualarm.TaskState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dtproto.geometry_msgs.Point3d pos = 1;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .dtproto.geometry_msgs.Point3d rot = 2;
  if (this->_internal_has_rot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rot_);
  }

  // .dtproto.geometry_msgs.Point3d linVel = 3;
  if (this->_internal_has_linvel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linvel_);
  }

  // .dtproto.geometry_msgs.Point3d angVel = 4;
  if (this->_internal_has_angvel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angvel_);
  }

  // .dtproto.geometry_msgs.Point3d force = 5;
  if (this->_internal_has_force()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.force_);
  }

  // .dtproto.geometry_msgs.Point3d moment = 6;
  if (this->_internal_has_moment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.moment_);
  }

  // uint32 id = 7;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskState::GetClassData() const { return &_class_data_; }


void TaskState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskState*>(&to_msg);
  auto& from = static_cast<const TaskState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.dualarm.TaskState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_has_rot()) {
    _this->_internal_mutable_rot()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_rot());
  }
  if (from._internal_has_linvel()) {
    _this->_internal_mutable_linvel()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_linvel());
  }
  if (from._internal_has_angvel()) {
    _this->_internal_mutable_angvel()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_angvel());
  }
  if (from._internal_has_force()) {
    _this->_internal_mutable_force()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_force());
  }
  if (from._internal_has_moment()) {
    _this->_internal_mutable_moment()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_moment());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskState::CopyFrom(const TaskState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.dualarm.TaskState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskState::IsInitialized() const {
  return true;
}

void TaskState::InternalSwap(TaskState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskState, _impl_.id_)
      + sizeof(TaskState::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(TaskState, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DualArm_2eproto_getter, &descriptor_table_DualArm_2eproto_once,
      file_level_metadata_DualArm_2eproto[1]);
}

// ===================================================================

class JointState::_Internal {
 public:
};

JointState::JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.dualarm.JointState)
}
JointState::JointState(const JointState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JointState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statusword_){}
    , decltype(_impl_.controlword_){}
    , decltype(_impl_.incposofs_cnt_){}
    , decltype(_impl_.absposofs_cnt_){}
    , decltype(_impl_.incpos_cnt_){}
    , decltype(_impl_.abspos_cnt_){}
    , decltype(_impl_.incvel_cps_){}
    , decltype(_impl_.mcutemp_c_){}
    , decltype(_impl_.invtemp_c_){}
    , decltype(_impl_.inputvolt_v_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.statusword_, &from._impl_.statusword_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inputvolt_v_) -
    reinterpret_cast<char*>(&_impl_.statusword_)) + sizeof(_impl_.inputvolt_v_));
  // @@protoc_insertion_point(copy_constructor:dtproto.dualarm.JointState)
}

inline void JointState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.statusword_){0u}
    , decltype(_impl_.controlword_){0u}
    , decltype(_impl_.incposofs_cnt_){0}
    , decltype(_impl_.absposofs_cnt_){0}
    , decltype(_impl_.incpos_cnt_){0}
    , decltype(_impl_.abspos_cnt_){0}
    , decltype(_impl_.incvel_cps_){0}
    , decltype(_impl_.mcutemp_c_){0}
    , decltype(_impl_.invtemp_c_){0}
    , decltype(_impl_.inputvolt_v_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JointState::~JointState() {
  // @@protoc_insertion_point(destructor:dtproto.dualarm.JointState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JointState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JointState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JointState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.dualarm.JointState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.statusword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.inputvolt_v_) -
      reinterpret_cast<char*>(&_impl_.statusword_)) + sizeof(_impl_.inputvolt_v_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 statusWord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.statusword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 controlWord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.controlword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incPosOfs_cnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.incposofs_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 absPosOfs_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.absposofs_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incPos_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.incpos_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 absPos_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.abspos_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incVel_cps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.incvel_cps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float mcuTemp_C = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.mcutemp_c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float invTemp_C = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.invtemp_c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float inputVolt_V = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.inputvolt_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JointState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.dualarm.JointState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->_internal_statusword() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_statusword(), target);
  }

  // uint32 controlWord = 2;
  if (this->_internal_controlword() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_controlword(), target);
  }

  // int32 incPosOfs_cnt = 3;
  if (this->_internal_incposofs_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_incposofs_cnt(), target);
  }

  // int32 absPosOfs_cnt = 4;
  if (this->_internal_absposofs_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_absposofs_cnt(), target);
  }

  // int32 incPos_cnt = 5;
  if (this->_internal_incpos_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_incpos_cnt(), target);
  }

  // int32 absPos_cnt = 6;
  if (this->_internal_abspos_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_abspos_cnt(), target);
  }

  // int32 incVel_cps = 7;
  if (this->_internal_incvel_cps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_incvel_cps(), target);
  }

  // float mcuTemp_C = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mcutemp_c = this->_internal_mcutemp_c();
  uint32_t raw_mcutemp_c;
  memcpy(&raw_mcutemp_c, &tmp_mcutemp_c, sizeof(tmp_mcutemp_c));
  if (raw_mcutemp_c != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_mcutemp_c(), target);
  }

  // float invTemp_C = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_invtemp_c = this->_internal_invtemp_c();
  uint32_t raw_invtemp_c;
  memcpy(&raw_invtemp_c, &tmp_invtemp_c, sizeof(tmp_invtemp_c));
  if (raw_invtemp_c != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_invtemp_c(), target);
  }

  // float inputVolt_V = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inputvolt_v = this->_internal_inputvolt_v();
  uint32_t raw_inputvolt_v;
  memcpy(&raw_inputvolt_v, &tmp_inputvolt_v, sizeof(tmp_inputvolt_v));
  if (raw_inputvolt_v != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_inputvolt_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.dualarm.JointState)
  return target;
}

size_t JointState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.dualarm.JointState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->_internal_statusword() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_statusword());
  }

  // uint32 controlWord = 2;
  if (this->_internal_controlword() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_controlword());
  }

  // int32 incPosOfs_cnt = 3;
  if (this->_internal_incposofs_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_incposofs_cnt());
  }

  // int32 absPosOfs_cnt = 4;
  if (this->_internal_absposofs_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_absposofs_cnt());
  }

  // int32 incPos_cnt = 5;
  if (this->_internal_incpos_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_incpos_cnt());
  }

  // int32 absPos_cnt = 6;
  if (this->_internal_abspos_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_abspos_cnt());
  }

  // int32 incVel_cps = 7;
  if (this->_internal_incvel_cps() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_incvel_cps());
  }

  // float mcuTemp_C = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mcutemp_c = this->_internal_mcutemp_c();
  uint32_t raw_mcutemp_c;
  memcpy(&raw_mcutemp_c, &tmp_mcutemp_c, sizeof(tmp_mcutemp_c));
  if (raw_mcutemp_c != 0) {
    total_size += 1 + 4;
  }

  // float invTemp_C = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_invtemp_c = this->_internal_invtemp_c();
  uint32_t raw_invtemp_c;
  memcpy(&raw_invtemp_c, &tmp_invtemp_c, sizeof(tmp_invtemp_c));
  if (raw_invtemp_c != 0) {
    total_size += 1 + 4;
  }

  // float inputVolt_V = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inputvolt_v = this->_internal_inputvolt_v();
  uint32_t raw_inputvolt_v;
  memcpy(&raw_inputvolt_v, &tmp_inputvolt_v, sizeof(tmp_inputvolt_v));
  if (raw_inputvolt_v != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JointState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointState::GetClassData() const { return &_class_data_; }


void JointState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JointState*>(&to_msg);
  auto& from = static_cast<const JointState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.dualarm.JointState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_statusword() != 0) {
    _this->_internal_set_statusword(from._internal_statusword());
  }
  if (from._internal_controlword() != 0) {
    _this->_internal_set_controlword(from._internal_controlword());
  }
  if (from._internal_incposofs_cnt() != 0) {
    _this->_internal_set_incposofs_cnt(from._internal_incposofs_cnt());
  }
  if (from._internal_absposofs_cnt() != 0) {
    _this->_internal_set_absposofs_cnt(from._internal_absposofs_cnt());
  }
  if (from._internal_incpos_cnt() != 0) {
    _this->_internal_set_incpos_cnt(from._internal_incpos_cnt());
  }
  if (from._internal_abspos_cnt() != 0) {
    _this->_internal_set_abspos_cnt(from._internal_abspos_cnt());
  }
  if (from._internal_incvel_cps() != 0) {
    _this->_internal_set_incvel_cps(from._internal_incvel_cps());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mcutemp_c = from._internal_mcutemp_c();
  uint32_t raw_mcutemp_c;
  memcpy(&raw_mcutemp_c, &tmp_mcutemp_c, sizeof(tmp_mcutemp_c));
  if (raw_mcutemp_c != 0) {
    _this->_internal_set_mcutemp_c(from._internal_mcutemp_c());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_invtemp_c = from._internal_invtemp_c();
  uint32_t raw_invtemp_c;
  memcpy(&raw_invtemp_c, &tmp_invtemp_c, sizeof(tmp_invtemp_c));
  if (raw_invtemp_c != 0) {
    _this->_internal_set_invtemp_c(from._internal_invtemp_c());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inputvolt_v = from._internal_inputvolt_v();
  uint32_t raw_inputvolt_v;
  memcpy(&raw_inputvolt_v, &tmp_inputvolt_v, sizeof(tmp_inputvolt_v));
  if (raw_inputvolt_v != 0) {
    _this->_internal_set_inputvolt_v(from._internal_inputvolt_v());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointState::CopyFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.dualarm.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointState::IsInitialized() const {
  return true;
}

void JointState::InternalSwap(JointState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointState, _impl_.inputvolt_v_)
      + sizeof(JointState::_impl_.inputvolt_v_)
      - PROTOBUF_FIELD_OFFSET(JointState, _impl_.statusword_)>(
          reinterpret_cast<char*>(&_impl_.statusword_),
          reinterpret_cast<char*>(&other->_impl_.statusword_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DualArm_2eproto_getter, &descriptor_table_DualArm_2eproto_once,
      file_level_metadata_DualArm_2eproto[2]);
}

// ===================================================================

class JointData::_Internal {
 public:
};

JointData::JointData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.dualarm.JointData)
}
JointData::JointData(const JointData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JointData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_rad_){}
    , decltype(_impl_.posaux_rad_){}
    , decltype(_impl_.vel_rps_){}
    , decltype(_impl_.acc_rpss_){}
    , decltype(_impl_.torq_nm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pos_rad_, &from._impl_.pos_rad_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.torq_nm_) -
    reinterpret_cast<char*>(&_impl_.pos_rad_)) + sizeof(_impl_.torq_nm_));
  // @@protoc_insertion_point(copy_constructor:dtproto.dualarm.JointData)
}

inline void JointData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_rad_){0}
    , decltype(_impl_.posaux_rad_){0}
    , decltype(_impl_.vel_rps_){0}
    , decltype(_impl_.acc_rpss_){0}
    , decltype(_impl_.torq_nm_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JointData::~JointData() {
  // @@protoc_insertion_point(destructor:dtproto.dualarm.JointData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JointData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JointData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JointData::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.dualarm.JointData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pos_rad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.torq_nm_) -
      reinterpret_cast<char*>(&_impl_.pos_rad_)) + sizeof(_impl_.torq_nm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double pos_rad = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.pos_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double posAux_rad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.posaux_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double vel_rps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.vel_rps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acc_rpss = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.acc_rpss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double torq_Nm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.torq_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JointData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.dualarm.JointData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double pos_rad = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pos_rad = this->_internal_pos_rad();
  uint64_t raw_pos_rad;
  memcpy(&raw_pos_rad, &tmp_pos_rad, sizeof(tmp_pos_rad));
  if (raw_pos_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_pos_rad(), target);
  }

  // double posAux_rad = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_posaux_rad = this->_internal_posaux_rad();
  uint64_t raw_posaux_rad;
  memcpy(&raw_posaux_rad, &tmp_posaux_rad, sizeof(tmp_posaux_rad));
  if (raw_posaux_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_posaux_rad(), target);
  }

  // double vel_rps = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vel_rps = this->_internal_vel_rps();
  uint64_t raw_vel_rps;
  memcpy(&raw_vel_rps, &tmp_vel_rps, sizeof(tmp_vel_rps));
  if (raw_vel_rps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_vel_rps(), target);
  }

  // double acc_rpss = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_rpss = this->_internal_acc_rpss();
  uint64_t raw_acc_rpss;
  memcpy(&raw_acc_rpss, &tmp_acc_rpss, sizeof(tmp_acc_rpss));
  if (raw_acc_rpss != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_acc_rpss(), target);
  }

  // double torq_Nm = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_torq_nm = this->_internal_torq_nm();
  uint64_t raw_torq_nm;
  memcpy(&raw_torq_nm, &tmp_torq_nm, sizeof(tmp_torq_nm));
  if (raw_torq_nm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_torq_nm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.dualarm.JointData)
  return target;
}

size_t JointData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.dualarm.JointData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double pos_rad = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pos_rad = this->_internal_pos_rad();
  uint64_t raw_pos_rad;
  memcpy(&raw_pos_rad, &tmp_pos_rad, sizeof(tmp_pos_rad));
  if (raw_pos_rad != 0) {
    total_size += 1 + 8;
  }

  // double posAux_rad = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_posaux_rad = this->_internal_posaux_rad();
  uint64_t raw_posaux_rad;
  memcpy(&raw_posaux_rad, &tmp_posaux_rad, sizeof(tmp_posaux_rad));
  if (raw_posaux_rad != 0) {
    total_size += 1 + 8;
  }

  // double vel_rps = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vel_rps = this->_internal_vel_rps();
  uint64_t raw_vel_rps;
  memcpy(&raw_vel_rps, &tmp_vel_rps, sizeof(tmp_vel_rps));
  if (raw_vel_rps != 0) {
    total_size += 1 + 8;
  }

  // double acc_rpss = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_rpss = this->_internal_acc_rpss();
  uint64_t raw_acc_rpss;
  memcpy(&raw_acc_rpss, &tmp_acc_rpss, sizeof(tmp_acc_rpss));
  if (raw_acc_rpss != 0) {
    total_size += 1 + 8;
  }

  // double torq_Nm = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_torq_nm = this->_internal_torq_nm();
  uint64_t raw_torq_nm;
  memcpy(&raw_torq_nm, &tmp_torq_nm, sizeof(tmp_torq_nm));
  if (raw_torq_nm != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JointData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointData::GetClassData() const { return &_class_data_; }


void JointData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JointData*>(&to_msg);
  auto& from = static_cast<const JointData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.dualarm.JointData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pos_rad = from._internal_pos_rad();
  uint64_t raw_pos_rad;
  memcpy(&raw_pos_rad, &tmp_pos_rad, sizeof(tmp_pos_rad));
  if (raw_pos_rad != 0) {
    _this->_internal_set_pos_rad(from._internal_pos_rad());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_posaux_rad = from._internal_posaux_rad();
  uint64_t raw_posaux_rad;
  memcpy(&raw_posaux_rad, &tmp_posaux_rad, sizeof(tmp_posaux_rad));
  if (raw_posaux_rad != 0) {
    _this->_internal_set_posaux_rad(from._internal_posaux_rad());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vel_rps = from._internal_vel_rps();
  uint64_t raw_vel_rps;
  memcpy(&raw_vel_rps, &tmp_vel_rps, sizeof(tmp_vel_rps));
  if (raw_vel_rps != 0) {
    _this->_internal_set_vel_rps(from._internal_vel_rps());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_rpss = from._internal_acc_rpss();
  uint64_t raw_acc_rpss;
  memcpy(&raw_acc_rpss, &tmp_acc_rpss, sizeof(tmp_acc_rpss));
  if (raw_acc_rpss != 0) {
    _this->_internal_set_acc_rpss(from._internal_acc_rpss());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_torq_nm = from._internal_torq_nm();
  uint64_t raw_torq_nm;
  memcpy(&raw_torq_nm, &tmp_torq_nm, sizeof(tmp_torq_nm));
  if (raw_torq_nm != 0) {
    _this->_internal_set_torq_nm(from._internal_torq_nm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointData::CopyFrom(const JointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.dualarm.JointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointData::IsInitialized() const {
  return true;
}

void JointData::InternalSwap(JointData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointData, _impl_.torq_nm_)
      + sizeof(JointData::_impl_.torq_nm_)
      - PROTOBUF_FIELD_OFFSET(JointData, _impl_.pos_rad_)>(
          reinterpret_cast<char*>(&_impl_.pos_rad_),
          reinterpret_cast<char*>(&other->_impl_.pos_rad_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DualArm_2eproto_getter, &descriptor_table_DualArm_2eproto_once,
      file_level_metadata_DualArm_2eproto[3]);
}

// ===================================================================

class ControlState::_Internal {
 public:
};

ControlState::ControlState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dtproto.dualarm.ControlState)
}
ControlState::ControlState(const ControlState& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ControlState* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dtproto.dualarm.ControlState)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlState::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ControlState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DualArm_2eproto_getter, &descriptor_table_DualArm_2eproto_once,
      file_level_metadata_DualArm_2eproto[4]);
}

// ===================================================================

class DualArmState::_Internal {
 public:
  static const ::dtproto::dualarm::ControlState& actcontrolstate(const DualArmState* msg);
  static const ::dtproto::dualarm::ControlState& descontrolstate(const DualArmState* msg);
  static const ::dtproto::dualarm::ThreadState& threadstate(const DualArmState* msg);
  static const ::dtproto::std_msgs::PackedDouble& arbitrarystate(const DualArmState* msg);
  static const ::dtproto::std_msgs::PackedDouble& arbitrarystatexy(const DualArmState* msg);
};

const ::dtproto::dualarm::ControlState&
DualArmState::_Internal::actcontrolstate(const DualArmState* msg) {
  return *msg->_impl_.actcontrolstate_;
}
const ::dtproto::dualarm::ControlState&
DualArmState::_Internal::descontrolstate(const DualArmState* msg) {
  return *msg->_impl_.descontrolstate_;
}
const ::dtproto::dualarm::ThreadState&
DualArmState::_Internal::threadstate(const DualArmState* msg) {
  return *msg->_impl_.threadstate_;
}
const ::dtproto::std_msgs::PackedDouble&
DualArmState::_Internal::arbitrarystate(const DualArmState* msg) {
  return *msg->_impl_.arbitrarystate_;
}
const ::dtproto::std_msgs::PackedDouble&
DualArmState::_Internal::arbitrarystatexy(const DualArmState* msg) {
  return *msg->_impl_.arbitrarystatexy_;
}
void DualArmState::clear_arbitrarystate() {
  if (GetArenaForAllocation() == nullptr && _impl_.arbitrarystate_ != nullptr) {
    delete _impl_.arbitrarystate_;
  }
  _impl_.arbitrarystate_ = nullptr;
}
void DualArmState::clear_arbitrarystatexy() {
  if (GetArenaForAllocation() == nullptr && _impl_.arbitrarystatexy_ != nullptr) {
    delete _impl_.arbitrarystatexy_;
  }
  _impl_.arbitrarystatexy_ = nullptr;
}
DualArmState::DualArmState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.dualarm.DualArmState)
}
DualArmState::DualArmState(const DualArmState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DualArmState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jointstate_){from._impl_.jointstate_}
    , decltype(_impl_.actjointdata_){from._impl_.actjointdata_}
    , decltype(_impl_.desjointdata_){from._impl_.desjointdata_}
    , decltype(_impl_.gripperstate_){from._impl_.gripperstate_}
    , decltype(_impl_.actgripperdata_){from._impl_.actgripperdata_}
    , decltype(_impl_.desgripperdata_){from._impl_.desgripperdata_}
    , decltype(_impl_.acttaskstate_){from._impl_.acttaskstate_}
    , decltype(_impl_.destaskstate_){from._impl_.destaskstate_}
    , decltype(_impl_.actcontrolstate_){nullptr}
    , decltype(_impl_.descontrolstate_){nullptr}
    , decltype(_impl_.threadstate_){nullptr}
    , decltype(_impl_.arbitrarystate_){nullptr}
    , decltype(_impl_.arbitrarystatexy_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_actcontrolstate()) {
    _this->_impl_.actcontrolstate_ = new ::dtproto::dualarm::ControlState(*from._impl_.actcontrolstate_);
  }
  if (from._internal_has_descontrolstate()) {
    _this->_impl_.descontrolstate_ = new ::dtproto::dualarm::ControlState(*from._impl_.descontrolstate_);
  }
  if (from._internal_has_threadstate()) {
    _this->_impl_.threadstate_ = new ::dtproto::dualarm::ThreadState(*from._impl_.threadstate_);
  }
  if (from._internal_has_arbitrarystate()) {
    _this->_impl_.arbitrarystate_ = new ::dtproto::std_msgs::PackedDouble(*from._impl_.arbitrarystate_);
  }
  if (from._internal_has_arbitrarystatexy()) {
    _this->_impl_.arbitrarystatexy_ = new ::dtproto::std_msgs::PackedDouble(*from._impl_.arbitrarystatexy_);
  }
  // @@protoc_insertion_point(copy_constructor:dtproto.dualarm.DualArmState)
}

inline void DualArmState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.jointstate_){arena}
    , decltype(_impl_.actjointdata_){arena}
    , decltype(_impl_.desjointdata_){arena}
    , decltype(_impl_.gripperstate_){arena}
    , decltype(_impl_.actgripperdata_){arena}
    , decltype(_impl_.desgripperdata_){arena}
    , decltype(_impl_.acttaskstate_){arena}
    , decltype(_impl_.destaskstate_){arena}
    , decltype(_impl_.actcontrolstate_){nullptr}
    , decltype(_impl_.descontrolstate_){nullptr}
    , decltype(_impl_.threadstate_){nullptr}
    , decltype(_impl_.arbitrarystate_){nullptr}
    , decltype(_impl_.arbitrarystatexy_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DualArmState::~DualArmState() {
  // @@protoc_insertion_point(destructor:dtproto.dualarm.DualArmState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DualArmState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jointstate_.~RepeatedPtrField();
  _impl_.actjointdata_.~RepeatedPtrField();
  _impl_.desjointdata_.~RepeatedPtrField();
  _impl_.gripperstate_.~RepeatedPtrField();
  _impl_.actgripperdata_.~RepeatedPtrField();
  _impl_.desgripperdata_.~RepeatedPtrField();
  _impl_.acttaskstate_.~RepeatedPtrField();
  _impl_.destaskstate_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.actcontrolstate_;
  if (this != internal_default_instance()) delete _impl_.descontrolstate_;
  if (this != internal_default_instance()) delete _impl_.threadstate_;
  if (this != internal_default_instance()) delete _impl_.arbitrarystate_;
  if (this != internal_default_instance()) delete _impl_.arbitrarystatexy_;
}

void DualArmState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DualArmState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.dualarm.DualArmState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.jointstate_.Clear();
  _impl_.actjointdata_.Clear();
  _impl_.desjointdata_.Clear();
  _impl_.gripperstate_.Clear();
  _impl_.actgripperdata_.Clear();
  _impl_.desgripperdata_.Clear();
  _impl_.acttaskstate_.Clear();
  _impl_.destaskstate_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.actcontrolstate_ != nullptr) {
    delete _impl_.actcontrolstate_;
  }
  _impl_.actcontrolstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.descontrolstate_ != nullptr) {
    delete _impl_.descontrolstate_;
  }
  _impl_.descontrolstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.threadstate_ != nullptr) {
    delete _impl_.threadstate_;
  }
  _impl_.threadstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arbitrarystate_ != nullptr) {
    delete _impl_.arbitrarystate_;
  }
  _impl_.arbitrarystate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arbitrarystatexy_ != nullptr) {
    delete _impl_.arbitrarystatexy_;
  }
  _impl_.arbitrarystatexy_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DualArmState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dtproto.dualarm.JointState jointState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jointstate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.dualarm.JointData actJointData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actjointdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.dualarm.JointData desJointData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_desjointdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.dualarm.JointState gripperState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gripperstate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.dualarm.JointData actGripperData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actgripperdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.dualarm.JointData desGripperData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_desgripperdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.dualarm.TaskState actTaskState = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_acttaskstate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.dualarm.TaskState desTaskState = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_destaskstate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .dtproto.dualarm.ControlState actControlState = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_actcontrolstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.dualarm.ControlState desControlState = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_descontrolstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.dualarm.ThreadState threadState = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_threadstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.std_msgs.PackedDouble arbitraryState = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_arbitrarystate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.std_msgs.PackedDouble arbitraryStateXY = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_arbitrarystatexy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DualArmState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.dualarm.DualArmState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dtproto.dualarm.JointState jointState = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_jointstate_size()); i < n; i++) {
    const auto& repfield = this->_internal_jointstate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.dualarm.JointData actJointData = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actjointdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_actjointdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.dualarm.JointData desJointData = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_desjointdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_desjointdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.dualarm.JointState gripperState = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gripperstate_size()); i < n; i++) {
    const auto& repfield = this->_internal_gripperstate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.dualarm.JointData actGripperData = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actgripperdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_actgripperdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.dualarm.JointData desGripperData = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_desgripperdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_desgripperdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.dualarm.TaskState actTaskState = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_acttaskstate_size()); i < n; i++) {
    const auto& repfield = this->_internal_acttaskstate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.dualarm.TaskState desTaskState = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_destaskstate_size()); i < n; i++) {
    const auto& repfield = this->_internal_destaskstate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .dtproto.dualarm.ControlState actControlState = 9;
  if (this->_internal_has_actcontrolstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::actcontrolstate(this),
        _Internal::actcontrolstate(this).GetCachedSize(), target, stream);
  }

  // .dtproto.dualarm.ControlState desControlState = 10;
  if (this->_internal_has_descontrolstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::descontrolstate(this),
        _Internal::descontrolstate(this).GetCachedSize(), target, stream);
  }

  // .dtproto.dualarm.ThreadState threadState = 11;
  if (this->_internal_has_threadstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::threadstate(this),
        _Internal::threadstate(this).GetCachedSize(), target, stream);
  }

  // .dtproto.std_msgs.PackedDouble arbitraryState = 20;
  if (this->_internal_has_arbitrarystate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::arbitrarystate(this),
        _Internal::arbitrarystate(this).GetCachedSize(), target, stream);
  }

  // .dtproto.std_msgs.PackedDouble arbitraryStateXY = 21;
  if (this->_internal_has_arbitrarystatexy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::arbitrarystatexy(this),
        _Internal::arbitrarystatexy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.dualarm.DualArmState)
  return target;
}

size_t DualArmState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.dualarm.DualArmState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dtproto.dualarm.JointState jointState = 1;
  total_size += 1UL * this->_internal_jointstate_size();
  for (const auto& msg : this->_impl_.jointstate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.dualarm.JointData actJointData = 2;
  total_size += 1UL * this->_internal_actjointdata_size();
  for (const auto& msg : this->_impl_.actjointdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.dualarm.JointData desJointData = 3;
  total_size += 1UL * this->_internal_desjointdata_size();
  for (const auto& msg : this->_impl_.desjointdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.dualarm.JointState gripperState = 4;
  total_size += 1UL * this->_internal_gripperstate_size();
  for (const auto& msg : this->_impl_.gripperstate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.dualarm.JointData actGripperData = 5;
  total_size += 1UL * this->_internal_actgripperdata_size();
  for (const auto& msg : this->_impl_.actgripperdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.dualarm.JointData desGripperData = 6;
  total_size += 1UL * this->_internal_desgripperdata_size();
  for (const auto& msg : this->_impl_.desgripperdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.dualarm.TaskState actTaskState = 7;
  total_size += 1UL * this->_internal_acttaskstate_size();
  for (const auto& msg : this->_impl_.acttaskstate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.dualarm.TaskState desTaskState = 8;
  total_size += 1UL * this->_internal_destaskstate_size();
  for (const auto& msg : this->_impl_.destaskstate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dtproto.dualarm.ControlState actControlState = 9;
  if (this->_internal_has_actcontrolstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.actcontrolstate_);
  }

  // .dtproto.dualarm.ControlState desControlState = 10;
  if (this->_internal_has_descontrolstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.descontrolstate_);
  }

  // .dtproto.dualarm.ThreadState threadState = 11;
  if (this->_internal_has_threadstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.threadstate_);
  }

  // .dtproto.std_msgs.PackedDouble arbitraryState = 20;
  if (this->_internal_has_arbitrarystate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arbitrarystate_);
  }

  // .dtproto.std_msgs.PackedDouble arbitraryStateXY = 21;
  if (this->_internal_has_arbitrarystatexy()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arbitrarystatexy_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DualArmState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DualArmState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DualArmState::GetClassData() const { return &_class_data_; }


void DualArmState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DualArmState*>(&to_msg);
  auto& from = static_cast<const DualArmState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.dualarm.DualArmState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.jointstate_.MergeFrom(from._impl_.jointstate_);
  _this->_impl_.actjointdata_.MergeFrom(from._impl_.actjointdata_);
  _this->_impl_.desjointdata_.MergeFrom(from._impl_.desjointdata_);
  _this->_impl_.gripperstate_.MergeFrom(from._impl_.gripperstate_);
  _this->_impl_.actgripperdata_.MergeFrom(from._impl_.actgripperdata_);
  _this->_impl_.desgripperdata_.MergeFrom(from._impl_.desgripperdata_);
  _this->_impl_.acttaskstate_.MergeFrom(from._impl_.acttaskstate_);
  _this->_impl_.destaskstate_.MergeFrom(from._impl_.destaskstate_);
  if (from._internal_has_actcontrolstate()) {
    _this->_internal_mutable_actcontrolstate()->::dtproto::dualarm::ControlState::MergeFrom(
        from._internal_actcontrolstate());
  }
  if (from._internal_has_descontrolstate()) {
    _this->_internal_mutable_descontrolstate()->::dtproto::dualarm::ControlState::MergeFrom(
        from._internal_descontrolstate());
  }
  if (from._internal_has_threadstate()) {
    _this->_internal_mutable_threadstate()->::dtproto::dualarm::ThreadState::MergeFrom(
        from._internal_threadstate());
  }
  if (from._internal_has_arbitrarystate()) {
    _this->_internal_mutable_arbitrarystate()->::dtproto::std_msgs::PackedDouble::MergeFrom(
        from._internal_arbitrarystate());
  }
  if (from._internal_has_arbitrarystatexy()) {
    _this->_internal_mutable_arbitrarystatexy()->::dtproto::std_msgs::PackedDouble::MergeFrom(
        from._internal_arbitrarystatexy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DualArmState::CopyFrom(const DualArmState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.dualarm.DualArmState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualArmState::IsInitialized() const {
  return true;
}

void DualArmState::InternalSwap(DualArmState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.jointstate_.InternalSwap(&other->_impl_.jointstate_);
  _impl_.actjointdata_.InternalSwap(&other->_impl_.actjointdata_);
  _impl_.desjointdata_.InternalSwap(&other->_impl_.desjointdata_);
  _impl_.gripperstate_.InternalSwap(&other->_impl_.gripperstate_);
  _impl_.actgripperdata_.InternalSwap(&other->_impl_.actgripperdata_);
  _impl_.desgripperdata_.InternalSwap(&other->_impl_.desgripperdata_);
  _impl_.acttaskstate_.InternalSwap(&other->_impl_.acttaskstate_);
  _impl_.destaskstate_.InternalSwap(&other->_impl_.destaskstate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DualArmState, _impl_.arbitrarystatexy_)
      + sizeof(DualArmState::_impl_.arbitrarystatexy_)
      - PROTOBUF_FIELD_OFFSET(DualArmState, _impl_.actcontrolstate_)>(
          reinterpret_cast<char*>(&_impl_.actcontrolstate_),
          reinterpret_cast<char*>(&other->_impl_.actcontrolstate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DualArmState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DualArm_2eproto_getter, &descriptor_table_DualArm_2eproto_once,
      file_level_metadata_DualArm_2eproto[5]);
}

// ===================================================================

class DualArmStateTimeStamped::_Internal {
 public:
  static const ::dtproto::std_msgs::Header& header(const DualArmStateTimeStamped* msg);
  static const ::dtproto::dualarm::DualArmState& state(const DualArmStateTimeStamped* msg);
};

const ::dtproto::std_msgs::Header&
DualArmStateTimeStamped::_Internal::header(const DualArmStateTimeStamped* msg) {
  return *msg->_impl_.header_;
}
const ::dtproto::dualarm::DualArmState&
DualArmStateTimeStamped::_Internal::state(const DualArmStateTimeStamped* msg) {
  return *msg->_impl_.state_;
}
void DualArmStateTimeStamped::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
DualArmStateTimeStamped::DualArmStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.dualarm.DualArmStateTimeStamped)
}
DualArmStateTimeStamped::DualArmStateTimeStamped(const DualArmStateTimeStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DualArmStateTimeStamped* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::dtproto::std_msgs::Header(*from._impl_.header_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::dtproto::dualarm::DualArmState(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:dtproto.dualarm.DualArmStateTimeStamped)
}

inline void DualArmStateTimeStamped::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DualArmStateTimeStamped::~DualArmStateTimeStamped() {
  // @@protoc_insertion_point(destructor:dtproto.dualarm.DualArmStateTimeStamped)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DualArmStateTimeStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.state_;
}

void DualArmStateTimeStamped::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DualArmStateTimeStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.dualarm.DualArmStateTimeStamped)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DualArmStateTimeStamped::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.dualarm.DualArmState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DualArmStateTimeStamped::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.dualarm.DualArmStateTimeStamped)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .dtproto.dualarm.DualArmState state = 2;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.dualarm.DualArmStateTimeStamped)
  return target;
}

size_t DualArmStateTimeStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.dualarm.DualArmStateTimeStamped)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dtproto.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .dtproto.dualarm.DualArmState state = 2;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DualArmStateTimeStamped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DualArmStateTimeStamped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DualArmStateTimeStamped::GetClassData() const { return &_class_data_; }


void DualArmStateTimeStamped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DualArmStateTimeStamped*>(&to_msg);
  auto& from = static_cast<const DualArmStateTimeStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.dualarm.DualArmStateTimeStamped)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::dtproto::std_msgs::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::dtproto::dualarm::DualArmState::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DualArmStateTimeStamped::CopyFrom(const DualArmStateTimeStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.dualarm.DualArmStateTimeStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualArmStateTimeStamped::IsInitialized() const {
  return true;
}

void DualArmStateTimeStamped::InternalSwap(DualArmStateTimeStamped* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DualArmStateTimeStamped, _impl_.state_)
      + sizeof(DualArmStateTimeStamped::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(DualArmStateTimeStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DualArmStateTimeStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DualArm_2eproto_getter, &descriptor_table_DualArm_2eproto_once,
      file_level_metadata_DualArm_2eproto[6]);
}

// ===================================================================

class OperationState::_Internal {
 public:
};

OperationState::OperationState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.dualarm.OperationState)
}
OperationState::OperationState(const OperationState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.op_mode_){}
    , decltype(_impl_.op_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.op_mode_, &from._impl_.op_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.op_status_) -
    reinterpret_cast<char*>(&_impl_.op_mode_)) + sizeof(_impl_.op_status_));
  // @@protoc_insertion_point(copy_constructor:dtproto.dualarm.OperationState)
}

inline void OperationState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.op_mode_){0}
    , decltype(_impl_.op_status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OperationState::~OperationState() {
  // @@protoc_insertion_point(destructor:dtproto.dualarm.OperationState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OperationState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.dualarm.OperationState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.op_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.op_status_) -
      reinterpret_cast<char*>(&_impl_.op_mode_)) + sizeof(_impl_.op_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 op_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.op_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 op_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.op_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.dualarm.OperationState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 op_mode = 1;
  if (this->_internal_op_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_op_mode(), target);
  }

  // int32 op_status = 2;
  if (this->_internal_op_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_op_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.dualarm.OperationState)
  return target;
}

size_t OperationState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.dualarm.OperationState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 op_mode = 1;
  if (this->_internal_op_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_op_mode());
  }

  // int32 op_status = 2;
  if (this->_internal_op_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_op_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationState::GetClassData() const { return &_class_data_; }


void OperationState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationState*>(&to_msg);
  auto& from = static_cast<const OperationState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.dualarm.OperationState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_op_mode() != 0) {
    _this->_internal_set_op_mode(from._internal_op_mode());
  }
  if (from._internal_op_status() != 0) {
    _this->_internal_set_op_status(from._internal_op_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationState::CopyFrom(const OperationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.dualarm.OperationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationState::IsInitialized() const {
  return true;
}

void OperationState::InternalSwap(OperationState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationState, _impl_.op_status_)
      + sizeof(OperationState::_impl_.op_status_)
      - PROTOBUF_FIELD_OFFSET(OperationState, _impl_.op_mode_)>(
          reinterpret_cast<char*>(&_impl_.op_mode_),
          reinterpret_cast<char*>(&other->_impl_.op_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DualArm_2eproto_getter, &descriptor_table_DualArm_2eproto_once,
      file_level_metadata_DualArm_2eproto[7]);
}

// ===================================================================

class OperationStateTimeStamped::_Internal {
 public:
  static const ::dtproto::std_msgs::Header& header(const OperationStateTimeStamped* msg);
  static const ::dtproto::dualarm::OperationState& state(const OperationStateTimeStamped* msg);
};

const ::dtproto::std_msgs::Header&
OperationStateTimeStamped::_Internal::header(const OperationStateTimeStamped* msg) {
  return *msg->_impl_.header_;
}
const ::dtproto::dualarm::OperationState&
OperationStateTimeStamped::_Internal::state(const OperationStateTimeStamped* msg) {
  return *msg->_impl_.state_;
}
void OperationStateTimeStamped::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
OperationStateTimeStamped::OperationStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.dualarm.OperationStateTimeStamped)
}
OperationStateTimeStamped::OperationStateTimeStamped(const OperationStateTimeStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationStateTimeStamped* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::dtproto::std_msgs::Header(*from._impl_.header_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::dtproto::dualarm::OperationState(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:dtproto.dualarm.OperationStateTimeStamped)
}

inline void OperationStateTimeStamped::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OperationStateTimeStamped::~OperationStateTimeStamped() {
  // @@protoc_insertion_point(destructor:dtproto.dualarm.OperationStateTimeStamped)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationStateTimeStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.state_;
}

void OperationStateTimeStamped::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationStateTimeStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.dualarm.OperationStateTimeStamped)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStateTimeStamped::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.dualarm.OperationState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationStateTimeStamped::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.dualarm.OperationStateTimeStamped)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .dtproto.dualarm.OperationState state = 2;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.dualarm.OperationStateTimeStamped)
  return target;
}

size_t OperationStateTimeStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.dualarm.OperationStateTimeStamped)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dtproto.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .dtproto.dualarm.OperationState state = 2;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationStateTimeStamped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationStateTimeStamped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationStateTimeStamped::GetClassData() const { return &_class_data_; }


void OperationStateTimeStamped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationStateTimeStamped*>(&to_msg);
  auto& from = static_cast<const OperationStateTimeStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.dualarm.OperationStateTimeStamped)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::dtproto::std_msgs::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::dtproto::dualarm::OperationState::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStateTimeStamped::CopyFrom(const OperationStateTimeStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.dualarm.OperationStateTimeStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStateTimeStamped::IsInitialized() const {
  return true;
}

void OperationStateTimeStamped::InternalSwap(OperationStateTimeStamped* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStateTimeStamped, _impl_.state_)
      + sizeof(OperationStateTimeStamped::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(OperationStateTimeStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStateTimeStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DualArm_2eproto_getter, &descriptor_table_DualArm_2eproto_once,
      file_level_metadata_DualArm_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dualarm
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dtproto::dualarm::ThreadState*
Arena::CreateMaybeMessage< ::dtproto::dualarm::ThreadState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::dualarm::ThreadState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::dualarm::TaskState*
Arena::CreateMaybeMessage< ::dtproto::dualarm::TaskState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::dualarm::TaskState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::dualarm::JointState*
Arena::CreateMaybeMessage< ::dtproto::dualarm::JointState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::dualarm::JointState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::dualarm::JointData*
Arena::CreateMaybeMessage< ::dtproto::dualarm::JointData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::dualarm::JointData >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::dualarm::ControlState*
Arena::CreateMaybeMessage< ::dtproto::dualarm::ControlState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::dualarm::ControlState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::dualarm::DualArmState*
Arena::CreateMaybeMessage< ::dtproto::dualarm::DualArmState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::dualarm::DualArmState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::dualarm::DualArmStateTimeStamped*
Arena::CreateMaybeMessage< ::dtproto::dualarm::DualArmStateTimeStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::dualarm::DualArmStateTimeStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::dualarm::OperationState*
Arena::CreateMaybeMessage< ::dtproto::dualarm::OperationState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::dualarm::OperationState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::dualarm::OperationStateTimeStamped*
Arena::CreateMaybeMessage< ::dtproto::dualarm::OperationStateTimeStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::dualarm::OperationStateTimeStamped >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
